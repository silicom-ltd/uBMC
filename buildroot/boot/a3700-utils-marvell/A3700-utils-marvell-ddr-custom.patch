diff -ruN A3700-utils-marvell-a0a1cb88327afa91415c59822fa9c5894d9ec3d7/script/gettimver.sh new/script/gettimver.sh
--- A3700-utils-marvell-a0a1cb88327afa91415c59822fa9c5894d9ec3d7/script/gettimver.sh	2018-11-25 18:36:58.000000000 +0800
+++ new/script/gettimver.sh	2020-10-27 16:14:11.575949476 +0800
@@ -33,7 +33,8 @@
 # Get version string and its length
 VERSTR=$(cat $VERFILE)
 VERLEN=${#VERSTR}
-
+#Disable the output "TIM-1.0" from begin
+exit 1
 echo "WRITE: 0xC0012004 0x54              ; Print 'T'" >> $OUTFILE
 echo "WAIT_FOR_BIT_SET: 0xC001200C 0x20 1 ; Wait for TX ready" >> $OUTFILE
 echo "WRITE: 0xC0012004 0x49              ; Print 'I'" >> $OUTFILE
diff -ruN A3700-utils-marvell-a0a1cb88327afa91415c59822fa9c5894d9ec3d7/tim/ddr/DDR_TOPOLOGY_CUST.txt new/tim/ddr/DDR_TOPOLOGY_CUST.txt
--- A3700-utils-marvell-a0a1cb88327afa91415c59822fa9c5894d9ec3d7/tim/ddr/DDR_TOPOLOGY_CUST.txt	2018-11-25 18:36:58.000000000 +0800
+++ new/tim/ddr/DDR_TOPOLOGY_CUST.txt	2020-10-27 16:14:11.620948942 +0800
@@ -2,25 +2,21 @@
 # This file is the input for A3700 DDR porting tool,
 # each item is one parameter for DDR topology, which will be parsed by
 # DDR tool and generate DDR register list accordingly.
-# Supported Customer boards:
-#       DDR3 1CS 512MB
+# Supported Marvell boards:
+#		DDR4 2CS : SILICOM MARVELL BOARD
 #
 
-#DDR3
-ddr_type=0
+#DDR4
+ddr_type=1
 
 #1CS
-ddr_cs_mask=1
+ddr_cs_mask=3
 
-#DDR3_1600K
-ddr_speedbin_index=12
+#DDR4_2400R
+ddr_speedbin_index=10
 
 #16BIT
 ddr_bus_width_index=2
 
-#4Gbits (512MB)
+#8Gbits (1GB)
 ddr_mem_size_index=3
-
-#800M-1600K(optional)
-ddr_cas_latency=11
-ddr_cas_write_latency=8
\ No newline at end of file
diff -ruN A3700-utils-marvell-a0a1cb88327afa91415c59822fa9c5894d9ec3d7/wtmi/sys_init/avs.c new/wtmi/sys_init/avs.c
--- A3700-utils-marvell-a0a1cb88327afa91415c59822fa9c5894d9ec3d7/wtmi/sys_init/avs.c	2018-11-25 18:36:58.000000000 +0800
+++ new/wtmi/sys_init/avs.c	2020-10-27 16:14:11.621948930 +0800
@@ -19,7 +19,7 @@
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOS
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
@@ -200,13 +200,13 @@
 			   AVS_VDD_BASE) & AVS_VDD_MASK;
 		regval |= (vdd_otp << HIGH_VDD_LIMIT_OFF);
 		regval |= (vdd_otp << LOW_VDD_LIMIT_OFF);
-		printf("SVC REV: %d, CPU VDD voltage: %s\n", svc_rev,
-			avis_dump[vdd_otp].desc);
+		/*printf("SVC REV: %d, CPU VDD voltage: %s\n", svc_rev,
+			avis_dump[vdd_otp].desc);*/
 	} else {
 		regval |= (vdd_default << HIGH_VDD_LIMIT_OFF);
 		regval |= (vdd_default << LOW_VDD_LIMIT_OFF);
-		printf("CPU VDD voltage default value: %s\n",
-			avis_dump[vdd_default].desc);
+		/*printf("CPU VDD voltage default value: %s\n",
+			avis_dump[vdd_default].desc);*/
 	}
 
 	/* Set high&low VDD limit */
diff -ruN A3700-utils-marvell-a0a1cb88327afa91415c59822fa9c5894d9ec3d7/wtmi/sys_init/main.c new/wtmi/sys_init/main.c
--- A3700-utils-marvell-a0a1cb88327afa91415c59822fa9c5894d9ec3d7/wtmi/sys_init/main.c	2018-11-25 18:36:58.000000000 +0800
+++ new/wtmi/sys_init/main.c	2020-10-27 16:15:48.687797256 +0800
@@ -41,8 +41,10 @@
 
 #if DEBUG
 #define ddr_debug printf
+#define debug printf
 #else
 #define ddr_debug(...)
+#define debug(...)
 #endif
 
 /* DDR topology file defines the memory size by MiB. */
@@ -131,7 +133,7 @@
 	struct ddr_init_result *result_in_dram, result_in_sram;
 	u32 chksum_in_dram = 0;
 
-	printf("WTMI: system early-init\n");
+	debug("WTMI: system early-init\n");
 
 	result_in_dram = (struct ddr_init_result *)(DDR_TUNE_RESULT_MEM_BASE);
 
@@ -313,6 +315,48 @@
 	return;
 }
 
+/*The wtm(CM3) remap 0XD0013800 to 0Xc0013800*/
+/*See the data sheet page 429 for details*/
+#define BANK0_BASE 0Xc0013800
+#define OUTPUT_EN	0x0
+#define INPUT_VAL	0x10
+#define OUTPUT_VAL	0x18
+#define OUTPUT_CTL	0x20
+#define SELECTION	0x30
+
+void silicom_led_init()
+{
+	/*Turn off the RED led*/
+	u32 reg,val;
+
+	val = readl(BANK0_BASE + OUTPUT_EN);
+	writel(val | BIT5, BANK0_BASE + OUTPUT_EN);
+
+	val = readl(BANK0_BASE + OUTPUT_VAL);
+	writel(val | BIT5, BANK0_BASE + OUTPUT_VAL);
+	/*Turn off the GRN led*/
+
+	val = readl(BANK0_BASE + SELECTION);
+	writel(val | BIT8, BANK0_BASE + SELECTION);
+
+	val = readl(BANK0_BASE + OUTPUT_EN);
+	writel(val | BIT6, BANK0_BASE + OUTPUT_EN);
+
+	val = readl(BANK0_BASE + OUTPUT_VAL);
+	writel(val | BIT6, BANK0_BASE + OUTPUT_VAL);
+
+	/*Turn off the BLUE led*/
+	val = readl(BANK0_BASE + SELECTION);
+	writel(val | BIT7, BANK0_BASE + SELECTION);
+
+	val = readl(BANK0_BASE + OUTPUT_EN);
+	writel(val | BIT7, BANK0_BASE + OUTPUT_EN);
+
+	val = readl(BANK0_BASE + OUTPUT_VAL);
+	writel(val | BIT7, BANK0_BASE + OUTPUT_VAL);
+
+	//debug("Done silicom_led_init \n");
+}
 int main(int exception, char **dummy)
 {
 	u32     status;
@@ -331,8 +375,8 @@
 	if (status)
 		return status;
 	init_printf(NULL, uart_putc);
-	printf("WTMI%s\n", VERSION);
-
+	debug("WTMI%s\n", VERSION);
+	silicom_led_init();
 	/* Call ddrgen library */
 	sys_init_main();
 
