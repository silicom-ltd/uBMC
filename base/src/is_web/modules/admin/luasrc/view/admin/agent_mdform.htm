<% if not self.embedded then %>
<!--<form method="post" enctype="multipart/form-data" action="<%=REQUEST_URI%>"> -->
<% end %>
	<div class="cbi-map" id="cbi-<%=self.config%>">
		<% if self.title and #self.title > 0 then %><h2><a id="content" name="content"><%=self.title%></a></h2><% end %>
		<% if self.description and #self.description > 0 then %><div class="cbi-map-descr"><%=self.description%></div><% end %>
		<% self:render_children() %>
		<br />
	</div>
<%- if self.message then %>
	<div><span style='color: green'><%=self.message%></span></div>
<%- end %>
<%- if self.errmessage then %>
	<div class="error"><span style='color: red'><%=self.errmessage%></span></div>
<%- end %>
<% if not self.embedded then %>
	<div class="cbi-page-actions">
	<div style="float: left;width: 70%;text-align: left;line-height: 16px;">
		<%:* If changes are made, commit will apply to current session. To save beyond system reboot, click Commit button but also Save config on Save tab.%>
	</div>
<%-
	if type(self.hidden) == "table" then
		for k, v in pairs(self.hidden) do
-%>
	<input type="hidden" id="<%=k%>" name="<%=k%>" value="<%=pcdata(v)%>" />
<%-
		end
	end
%>
<% if redirect then %>
	<div style="float:left">
		<input class="cbi-button cbi-button-link" type="button" value="<%:Back to Overview%>" onclick="location.href='<%=pcdata(redirect)%>'" />
	</div>
<% end %>
<%- if self.flow and self.flow.skip then %>
	<input class="cbi-button cbi-button-skip" type="submit" name="cbi.skip" value="<%:Skip%>" />
<% end %>
<%- if self.submit ~= false then %>
	<input class="cbi-button cbi-button-save" type="submit" name="cbi.commit" value="
		<%- if not self.submit then -%><%-:Commit-%><%-else-%><%=self.submit%><%end-%>
	" />
<% end %>
<%- if self.reset ~= false then %>
	<input class="cbi-button cbi-button-reset" type="reset" name="cbi.reset" value="
		<%- if not self.reset then -%><%-:Reset-%><%-else-%><%=self.reset%><%end-%>
	" />
<% end %>
<%- if self.cancel ~= false and self.on_cancel then %>
	<input class="cbi-button cbi-button-reset" type="submit" name="cbi.cancel" value="
		<%- if not self.cancel then -%><%-:Cancel-%><%-else-%><%=self.cancel%><%end-%>
	" />
<% end %>
		<script type="text/javascript">cbi_d_update();</script>
	</div>
<!--</form> -->
<script type="text/javascript">

if (!Array.prototype.indexOf) {
	Array.prototype.indexOf = function(elt /*, from*/) {

		var len = this.length >>> 0;

		var from = Number(arguments[1]) || 0;
		from = (from < 0)
			? Math.ceil(from)
			: Math.floor(from);

		if (from < 0)
			from += len;

		for (; from < len; from++) {
			if (from in this && this[from] === elt)
				return from;
		}

		return -1;
	};
}

var EventUtil = {
	addHandler: function(element, type, handler) {
		if (element.addEventListener) {
			element.addEventListener(type, handler, false);
		} else if (element.attachEvent) {
			element.attachEvent("on" + type, handler);
		} else {
			element["on" + type] = handler;
		}
	}
};
var auth_array = [];
var version_array = [];
var password_array = [];
var community_array = [];

function collect_tree(comp) {
	var children = comp.childNodes;
	var i = 0;
	for (; i < children.length; i++) {
		if (children[i] == undefined)
			continue;
		if (children[i].nodeType != undefined && children[i].nodeType == 1) {
			if (children[i].tagName != undefined) {
				if (children[i].tagName.toLowerCase() == 'select') {
					if (children[i].id != undefined) {
						if (children[i].id.indexOf('version') > 0) {
							version_array.push(children[i]);
							break;
						} else if (children[i].id.indexOf('auth') > 0) {
							auth_array.push(children[i]);
							break;
						}
					}
				} else if (children[i].tagName.toLowerCase() == 'input') {
					if (children[i].id != undefined) {
						if (children[i].id.indexOf('community') > 0) {
							community_array.push(children[i]);
							children[i].style.borderColor = '';
							break;
						} else if (children[i].id.indexOf('password') > 0) {
							password_array.push(children[i]);
							children[i].style.borderColor = '';
							break;
						}
					}
				}
			}
			if (children[i].childNodes != undefined)
				collect_tree(children[i]);
		}
	}
}

function version_changed(event) {
	var index;
	if (event.srcElement)
		index = version_array.indexOf(event.srcElement);
	else
		index = version_array.indexOf(event.target);
	var selectedIndex = version_array[index].selectedIndex;
	if (selectedIndex == 2) {
		auth_array[index].disabled = false;
		password_array[index].disabled = false;
	} else {
		password_array[index].disabled = true;
		auth_array[index].disabled = true;
		password_array[index].value = '';
	}
}

function collect_component() {
	field = document.getElementById('cbi-trap-hosts-table');

	children = field.childNodes;
	var tbody = null;
	var count = 0;
	for (i in children) {
		if (children[i].tagName != undefined) {
			if (children[i].tagName.toLowerCase() == 'div') {
				if (children[i].className == 'cbi-section-node') {
					if (children[i].childNodes[0].childNodes.length > 1)
						tbody = children[i].childNodes[0].childNodes[1];
					else
						tbody = children[i].childNodes[0].childNodes[0];
					break;
				}
			}
		}
	}

	children = tbody.childNodes;
	for (i in children) {
		if (children[i].tagName != undefined) {
			if (children[i].tagName.toLowerCase() == 'tr') {
				count++;
				if (count > 2) 
					collect_tree(children[i]);
			}
		}
	}

	if (version_array.length > 0) {
		for (i in version_array) {
			if (version_array[i].selectedIndex != 2) {
				password_array[i].disabled = 'disabled';
				auth_array[i].disabled = 'disabled';
				password_array[i].value = '';
			}

			EventUtil.addHandler(version_array[i], 'change', version_changed);
		}
	}
}

function validate_word(word) {
	var reg = /[0-9a-wA-W_]+/;
	return word.match(reg);
}

function validate_pwd(word) {
	if (word.length >= 8) {
		return validate_word(word);
	}
	return false;
}

function validate_form(event) {
	var correct = true;
	
	if (version_array.length > 0) {
		for (var i=0; i<version_array.length; i++) {
			if (version_array[i].selectedIndex == 2) {
				if (!validate_pwd(password_array[i].value)) {
					correct = false;
					password_array[i].style.borderColor = '#ff0000';
				} else {
					password_array[i].style.borderColor = '';
				}
			} else {
				password_array[i].style.borderColor = '';
			}
		}

		for (var i=0; i<version_array.length; i++) {
			if (!validate_word(community_array[i].value)) {
				correct = false;
				community_array[i].style.borderColor = '#ff0000';
			} else {
				community_array[i].style.borderColor = '';
			}
		}

		if (!correct) {
			event.preventDefault ? event.preventDefault() : (event.returnValue = false);
			alert('Some fields are invalid!');
		}
	}
}

collect_component();
EventUtil.addHandler(document.forms[0], 'submit', validate_form);
</script>
<% end %>
