--- linux-ti2018.02-rc4-int-orig/drivers/hwmon/emc2300.c	1970-01-01 08:00:00.000000000 +0800
+++ linux-ti2018.02-rc4-int-silicom/drivers/hwmon/emc2300.c	2020-03-09 10:47:12.076803501 +0800
@@ -0,0 +1,404 @@
+/*
+ * emc2300.c - Support for SMSC EMC2103
+ * Copyright (c) 2010 SMSC
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/jiffies.h>
+#include <linux/i2c.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/err.h>
+#include <linux/mutex.h>
+#include <linux/string.h>
+
+
+typedef struct emc2300_reg{
+	u8     isvalid;   // 0 ---- not valid , 1 ----> valid
+	u8     reg;
+}emc2300_reg;
+
+/* Addresses scanned */
+static const unsigned short normal_i2c[] = { 0x2E, I2C_CLIENT_END };
+
+static const u8 REG_TEMP[3] = { 0x25, 0x26, 0x27 };
+static const u8 REG_FAN_TACH[4] = { 0x28, 0x2a, 0x2c, 0x2e };
+
+
+
+#define REG_COMPANY_ID		     0x3e
+// Register 3Fh: Version / Stepping
+#define REG_VER_SETPPING_ID      0x3f
+
+
+/* from datasheet: rpm = (5400054 ) / count
+ * FAN_RPM_FACTOR =  60 * 1000000 / 11.111
+ * */
+#define FAN_RPM_FACTOR		5400054
+
+
+struct emc2300_data {
+	struct i2c_client	*client;
+	const struct		attribute_group *groups[4];
+	struct mutex		update_lock;
+	bool			    valid;		/* registers are valid */
+	int			        temp_count;	 /* num of temp sensors */
+	int			        fan_count;	 /* num of fan sensors */
+	unsigned long		last_updated;	/* in jiffies */
+	s8	                temp[3];	/* internal + 2 remote */
+	u16			        fan_tach[4];
+};
+
+static int read_u8_from_i2c(struct i2c_client *client, u8 i2c_reg, u8 *output)
+{
+	int status = i2c_smbus_read_byte_data(client, i2c_reg);
+	if (status < 0) {
+		dev_warn(&client->dev, "reg 0x%02x, err %d\n",
+			i2c_reg, status);
+	} else {
+		*output = status;
+	}
+	return status;
+}
+
+
+static void write_u8_from_i2c(struct i2c_client *client, u8 i2c_reg, u8 val){
+	i2c_smbus_write_byte_data(client, i2c_reg, val);
+}
+
+static void read_temp_from_i2c(struct i2c_client *client, u8 i2c_reg,
+			       s8 *temp)
+{
+	u8 degrees;
+
+	if (read_u8_from_i2c(client, i2c_reg, &degrees) < 0)
+		return;
+
+	//  Current temperatures are represented as 8
+	//  bit, 2’s complement, signed numbers in Celsius
+	*temp = ( degrees >= 0 && degrees <= 0x7f ) ? degrees : -(~degrees+0x01);
+
+}
+
+static void read_fan_from_i2c(struct i2c_client *client, u16 *output,
+			      u8 hi_addr, u8 lo_addr)
+{
+	u8 high_byte, lo_byte;
+	// When one byte of a 16-bit register is read,
+	// the other byte latches the current value until it is read, in
+	// order to ensure a valid reading. The order is LSB first, MSB second.
+	if (read_u8_from_i2c(client, lo_addr, &lo_byte) < 0)
+		return;
+	if (read_u8_from_i2c(client, hi_addr, &high_byte) < 0)
+		return;
+
+	*output = (u16)((high_byte << 8) | lo_byte);
+}
+
+
+
+static struct emc2300_data *emc2300_update_device(struct device *dev)
+{
+	struct emc2300_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+
+	mutex_lock(&data->update_lock);
+
+	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
+	    || !data->valid) {
+		int i;
+
+		for (i = 0; i < data->temp_count; i++) {
+			read_temp_from_i2c(client, REG_TEMP[i], &data->temp[i]);
+
+		}
+
+		for (i = 0; i < data->fan_count; i++) {
+			u8 lo_addr = REG_FAN_TACH[i];
+			u8 hi_addr = lo_addr + 1;
+			read_fan_from_i2c(client, &data->fan_tach[i],
+					hi_addr, lo_addr);
+		}
+
+		data->last_updated = jiffies;
+		data->valid = true;
+	}
+
+	mutex_unlock(&data->update_lock);
+
+	return data;
+}
+
+static ssize_t
+show_temp(struct device *dev, struct device_attribute *da, char *buf)
+{
+	int nr = to_sensor_dev_attr(da)->index;
+	struct emc2300_data *data = emc2300_update_device(dev);
+	int millidegrees = data->temp[nr] * 1000;
+	return sprintf(buf, "%d\n", millidegrees);
+}
+
+
+static ssize_t
+show_temp_fault(struct device *dev, struct device_attribute *da, char *buf)
+{
+	int nr = to_sensor_dev_attr(da)->index;
+	struct emc2300_data *data = emc2300_update_device(dev);
+	// The Temperature Reading register will return a value of 80h
+    // if the remote diode pins are not implemented by the board
+	// designer or are not functioning properly
+	bool fault = (data->temp[nr] == -128);
+	return sprintf(buf, "%d\n", fault ? 1 : 0);
+}
+
+
+
+static ssize_t
+show_fan(struct device *dev, struct device_attribute *da, char *buf)
+{
+	int nr = to_sensor_dev_attr(da)->index;
+	struct emc2300_data *data = emc2300_update_device(dev);
+	int rpm = 0;
+	if (data->fan_tach[nr] != 0){
+		// If the Tach 1 data bytes contain 0C86h (MSB followed by LSB). This is equivalent to
+		// 3206 clock counts. Multiplying this number by 11.111 μ s (clock period)
+		// yields 0.03562s. This number
+		// represents the measured time for two full periods of the TACH signal.
+		// Inverting this number and
+		// multiplying it by 60 yields a final RPM value of 1684.
+		rpm = FAN_RPM_FACTOR / data->fan_tach[nr];
+	}
+	return sprintf(buf, "%d\n", rpm);
+}
+
+
+static ssize_t
+show_fan_fault(struct device *dev, struct device_attribute *da, char *buf)
+{
+	int nr = to_sensor_dev_attr(da)->index;
+	struct emc2300_data *data = emc2300_update_device(dev);
+	// FFFFh indicates that the fan is not spinning,
+	// or the tachometer input is not connected to a valid signal
+	// (This could be triggered by a counter overflow).
+	bool fault = ((data->fan_tach[nr] & 0xffff) == 0xffff);
+	return sprintf(buf, "%d\n", fault ? 1 : 0);
+}
+
+
+static emc2300_reg reg = {};
+
+static ssize_t
+read_emc2300_reg(struct device *dev, struct device_attribute *da, char *buf)
+{
+	u8 val = 0x00;
+
+	struct emc2300_data *data = emc2300_update_device(dev);
+	struct i2c_client *client = data->client;
+
+	if( !reg.isvalid ){
+		return sprintf(buf, "If you want to read the emc2300 register , run the follow command :\n"
+				"\t echo 0x3E > emc2300_reg \n"
+				"\t cat emc2300_reg \n"
+				"If you want to write value to the emc2300 register , run the follow command :\n"
+				"\t echo 0x46 0xff > emc2300_reg \n");
+	}
+	read_u8_from_i2c(client,reg.reg,&val);
+	return sprintf(buf, "Read reg : 0x%02x value : 0x%02x \n", reg.reg,val);
+}
+
+static ssize_t write_emc2300_reg(struct device *dev, struct device_attribute *da,
+			   const char *buf, size_t count)
+{
+	int index = 0 , status = 0;
+	long i2c_reg = 0x00, val = 0x00;
+
+	char *strv= (char *)buf , *token = NULL;
+
+	struct emc2300_data *data = emc2300_update_device(dev);
+	struct i2c_client *client = data->client;
+
+	// reset
+	memset(&reg,0,sizeof(emc2300_reg));
+
+	token = strsep( &strv," ");
+	while( token!=NULL ){
+		if( !index ){
+			status = kstrtol(token,16,&i2c_reg);
+			if( status < 0 ){
+				dev_err(&client->dev, "write reg %s, Please input valid register \n",buf);
+				return status;
+			}
+		}
+		else{
+			status = kstrtol(token,16,&val);
+			if( status < 0 ){
+				dev_err(&client->dev, "write reg %s, Please input valid register \n",buf);
+				return status;
+			}
+		}
+		index++;
+		token = strsep( &strv," " );
+	}
+
+	if( i2c_reg < 0x20 || (i2c_reg > 0x96 && i2c_reg != 0xff) ){
+		dev_err(&client->dev, "read reg 0x%02x, Please input valid register \n",(u8)i2c_reg);
+		return count;
+	}
+	reg.isvalid = 1;
+	reg.reg = (u8)i2c_reg;
+	// write
+	if( index > 1 ){
+		// here to write directly
+		write_u8_from_i2c(client,i2c_reg,val);
+	}
+	return count;
+}
+
+static SENSOR_DEVICE_ATTR(temp1_input, S_IRUGO, show_temp, NULL, 0);
+static SENSOR_DEVICE_ATTR(temp1_fault, S_IRUGO, show_temp_fault, NULL, 0);
+static SENSOR_DEVICE_ATTR(temp2_input, S_IRUGO, show_temp, NULL, 1);
+static SENSOR_DEVICE_ATTR(temp2_fault, S_IRUGO, show_temp_fault, NULL, 1);
+static SENSOR_DEVICE_ATTR(temp3_input, S_IRUGO, show_temp, NULL, 2);
+static SENSOR_DEVICE_ATTR(temp3_fault, S_IRUGO, show_temp_fault, NULL, 2);
+
+static SENSOR_DEVICE_ATTR(fan1_input, S_IRUGO, show_fan, NULL,0);
+static SENSOR_DEVICE_ATTR(fan1_fault, S_IRUGO, show_fan_fault, NULL, 0);
+static SENSOR_DEVICE_ATTR(fan2_input, S_IRUGO, show_fan, NULL,1);
+static SENSOR_DEVICE_ATTR(fan2_fault, S_IRUGO, show_fan_fault, NULL, 1);
+static SENSOR_DEVICE_ATTR(fan3_input, S_IRUGO, show_fan, NULL,2);
+static SENSOR_DEVICE_ATTR(fan3_fault, S_IRUGO, show_fan_fault, NULL, 2);
+static SENSOR_DEVICE_ATTR(fan4_input, S_IRUGO, show_fan, NULL,3);
+static SENSOR_DEVICE_ATTR(fan4_fault, S_IRUGO, show_fan_fault, NULL, 3);
+
+static DEVICE_ATTR(emc2300_reg, S_IRUGO | S_IWUSR, read_emc2300_reg, write_emc2300_reg);
+
+/* sensors present on all models */
+static struct attribute *emc2300_attributes[] = {
+	&sensor_dev_attr_temp1_input.dev_attr.attr,
+	&sensor_dev_attr_temp1_fault.dev_attr.attr,
+	&sensor_dev_attr_temp2_input.dev_attr.attr,
+	&sensor_dev_attr_temp2_fault.dev_attr.attr,
+	&sensor_dev_attr_temp3_input.dev_attr.attr,
+	&sensor_dev_attr_temp3_fault.dev_attr.attr,
+
+	&sensor_dev_attr_fan1_input.dev_attr.attr,
+	&sensor_dev_attr_fan1_fault.dev_attr.attr,
+	&sensor_dev_attr_fan2_input.dev_attr.attr,
+	&sensor_dev_attr_fan2_fault.dev_attr.attr,
+	&sensor_dev_attr_fan3_input.dev_attr.attr,
+	&sensor_dev_attr_fan3_fault.dev_attr.attr,
+	&sensor_dev_attr_fan4_input.dev_attr.attr,
+	&sensor_dev_attr_fan4_fault.dev_attr.attr,
+	// add for read and write emc2300 register
+	&dev_attr_emc2300_reg.attr,
+	NULL
+};
+
+
+static const struct attribute_group emc2300_group = {
+	.attrs = emc2300_attributes,
+};
+
+
+static int
+emc2300_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	struct emc2300_data *data;
+	struct device *hwmon_dev;
+	int idx = 0;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_BYTE_DATA))
+		return -EIO;
+
+	data = devm_kzalloc(&client->dev, sizeof(struct emc2300_data),
+			    GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	i2c_set_clientdata(client, data);
+	data->client = client;
+	mutex_init(&data->update_lock);
+
+	// The emc2300 has three temperature :
+	// Remote Diode 1 Temp , Remote Diode 2  Temp  and Internal Temp
+	data->temp_count = 3;
+	// there are four fan sensors .
+	data->fan_count = 4;
+
+	/* sysfs hooks */
+	data->groups[idx++] = &emc2300_group;
+
+	hwmon_dev = devm_hwmon_device_register_with_groups(&client->dev,
+							   client->name, data,
+							   data->groups);
+	if (IS_ERR(hwmon_dev))
+		return PTR_ERR(hwmon_dev);
+
+	dev_info(&client->dev, "%s: sensor '%s'\n",
+		 dev_name(hwmon_dev), client->name);
+
+	return 0;
+}
+
+static const struct i2c_device_id emc2300_ids[] = {
+	{ "emc2300", 0, },
+	{ "silc_fan", 0, },//add compatibility for UBMC S/M/L system
+	{ /* LIST END */ }
+};
+MODULE_DEVICE_TABLE(i2c, emc2300_ids);
+/* Return 0 if detection is successful, -ENODEV otherwise */
+static int
+emc2300_detect(struct i2c_client *new_client, struct i2c_board_info *info)
+{
+	struct i2c_adapter *adapter = new_client->adapter;
+	int company, version;
+
+	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA))
+		return -ENODEV;
+
+	company = i2c_smbus_read_byte_data(new_client, REG_COMPANY_ID);
+	if (company != 0x5C)
+		return -ENODEV;
+
+	version = ( i2c_smbus_read_byte_data(new_client, REG_VER_SETPPING_ID) & 0xf0 ) >> 4 ;
+	//printk(KERN_WARNING "####FUNC %s LINE %d version 0x%02x ####\n",__func__,__LINE__,version);
+	if ( version != 0x06 )
+		return -ENODEV;
+
+	strlcpy(info->type, "emc2300", I2C_NAME_SIZE);
+
+	return 0;
+}
+
+static struct i2c_driver emc2300_driver = {
+	.class		= I2C_CLASS_HWMON,
+	.driver = {
+		.name	= "emc2300",
+	},
+	.probe		= emc2300_probe,
+	.id_table	= emc2300_ids,
+	.detect		= emc2300_detect,
+	.address_list	= normal_i2c,
+};
+
+module_i2c_driver(emc2300_driver);
+
+MODULE_AUTHOR("Steve Glendinning <steve.glendinning@shawell.net>");
+MODULE_DESCRIPTION("SMSC EMC2300 hwmon driver");
+MODULE_LICENSE("GPL");
