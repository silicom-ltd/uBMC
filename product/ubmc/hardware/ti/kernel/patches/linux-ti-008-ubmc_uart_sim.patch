--- linux-custom-orig/drivers/tty/serial/uart_sim_ubmc.c	1970-01-01 08:00:00.000000000 +0800
+++ linux-custom-silicom/drivers/tty/serial/uart_sim_ubmc.c	2018-07-21 17:46:25.186465786 +0800
@@ -0,0 +1,959 @@
+/*************************************************************************
+    > File Name: uart_sim_ubmc.c
+    > Author: allen
+    > Mail: allen.zhou@net-perf.com
+    > Created Time: Wed 21 Mar 2018 03:50:40 PM HKT
+ ************************************************************************/
+#include <linux/module.h>  
+#include <linux/console.h>
+#include <linux/fs.h>  
+#include <linux/cdev.h>  
+#include <linux/device.h>  
+#include <linux/platform_device.h> 
+#include <linux/slab.h>
+#include <asm/io.h>  
+#include <asm/uaccess.h>  
+#include <linux/tty.h>
+#include <linux/tty_flip.h>
+#include <linux/serial.h>
+#include <linux/mutex.h>
+#include <linux/sched.h>
+#include <linux/sched/signal.h>
+#include <linux/wait.h>
+#include <linux/poll.h>
+
+
+#define OMAP_SERIAL_NAME    "ttyF"
+#define LOG_BUF_SHIFT 20
+#define _UART_SIM_BUF_LEN (1 << LOG_BUF_SHIFT) 
+#define TTY_SIM_MINOR        1
+#define DELAY_TIME      HZ/20
+#define TMP_BUF_SIZE  (1<<9)
+
+
+
+ssize_t uart_sim_read (struct file *filp, char __user *buf, size_t count, loff_t *offset);
+ssize_t uart_sim_write (struct file *filp, const char __user *buf, size_t count, loff_t *offset);
+int uart_sim_open (struct inode * inode, struct file *filp);
+static unsigned int uart_sim_poll(struct file *filp, poll_table *wait);
+
+struct circle_buffer
+{
+    char *		buffer;
+    uint32_t	size;
+    uint32_t	write_pos;
+    uint32_t	read_pos;
+    spinlock_t	lock;
+};
+
+
+int circle_buffer_init(struct circle_buffer * ring_buf)
+{
+    char * kbuf ;
+
+    kbuf = kmalloc(_UART_SIM_BUF_LEN, GFP_KERNEL);
+    if (!kbuf)
+    {
+        printk(KERN_ERR "failed to alloc memory for ring buffer");
+        return -ENOMEM;
+    }
+
+    memset(ring_buf, 0, sizeof(struct circle_buffer));
+    ring_buf->buffer = kbuf;
+    ring_buf->size = _UART_SIM_BUF_LEN;
+    ring_buf->write_pos = 0;
+    ring_buf->read_pos = 0;
+
+    spin_lock_init(&ring_buf->lock);
+
+    return 0;
+}
+
+void circle_buffer_deinit(struct circle_buffer * ring_buf)
+{
+    kfree(ring_buf->buffer);    
+}
+
+uint32_t __circle_buffer_len(struct circle_buffer *ring_buf)
+{
+    return (ring_buf->write_pos - ring_buf->read_pos);
+}
+
+uint32_t __circle_buffer_get(struct circle_buffer *ring_buf, void * buffer, uint32_t size)
+{
+    uint32_t len = 0;
+    size  = min(size, ring_buf->write_pos - ring_buf->read_pos);
+    /* first get the data from fifo->out until the end of the buffer */
+    len = min(size, ring_buf->size - (ring_buf->read_pos & (ring_buf->size - 1)));
+    memcpy(buffer, ring_buf->buffer + (ring_buf->read_pos & (ring_buf->size - 1)), len);
+    /* then get the rest (if any) from the beginning of the buffer */
+    memcpy(buffer + len, ring_buf->buffer, size - len);
+    ring_buf->read_pos += size;
+    return size;
+}
+uint32_t __circle_buffer_put(struct circle_buffer *ring_buf, void *buffer, uint32_t size)
+{
+    uint32_t len = 0;
+    size = min(size, ring_buf->size - ring_buf->write_pos + ring_buf->read_pos);
+    /* first put the data starting from fifo->in to buffer end */
+    len  = min(size, ring_buf->size - (ring_buf->write_pos & (ring_buf->size - 1)));
+    memcpy(ring_buf->buffer + (ring_buf->write_pos & (ring_buf->size - 1)), buffer, len);
+    /* then put the rest (if any) at the beginning of the buffer */
+    memcpy(ring_buf->buffer, buffer + len, size - len);
+    ring_buf->write_pos += size;
+    return size;
+}
+
+uint32_t circle_buffer_len_room(struct circle_buffer *ring_buf)
+{
+    return _UART_SIM_BUF_LEN -  __circle_buffer_len(ring_buf);
+}
+uint32_t circle_buffer_len(struct circle_buffer *ring_buf)
+{
+    uint32_t len = 0;
+    len = __circle_buffer_len(ring_buf);
+    return len;
+}
+
+uint32_t circle_buffer_get(struct circle_buffer *ring_buf, void *buffer, uint32_t size)
+{
+    uint32_t ret;
+	unsigned long flags;
+
+    spin_lock_irqsave(&ring_buf->lock, flags);
+    ret = __circle_buffer_get(ring_buf, buffer, size);
+    if (ring_buf->write_pos == ring_buf->read_pos)
+        ring_buf->write_pos = ring_buf->read_pos = 0;
+    spin_unlock_irqrestore(&ring_buf->lock, flags);
+    return ret;
+}
+
+uint32_t circle_buffer_put(struct circle_buffer *ring_buf, void *buffer, uint32_t size)
+{
+    uint32_t ret;
+	unsigned long flags;
+
+    spin_lock_irqsave(&ring_buf->lock, flags);
+    ret = __circle_buffer_put(ring_buf, buffer, size);
+    spin_unlock_irqrestore(&ring_buf->lock, flags);
+    return ret;
+}
+
+
+static struct circle_buffer uart_read_buf;
+static struct circle_buffer uart_write_buf;
+
+struct tty_sim_serial {
+    struct tty_struct    *tty;        /* pointer to the tty for this device */
+    struct mutex    port_write_mutex;
+    struct tty_port port;
+    struct timer_list   *timer;
+ 
+    /* for tiocmget and tiocmset functions */
+    int                     msr;            /* MSR shadow */
+    int                     mcr;            /* MCR shadow */
+
+    /* for ioctl fun */
+    struct serial_struct    serial;
+    wait_queue_head_t       wait;
+    struct async_icount     icount;
+
+};
+
+static inline void printk_my_debug(char * func_name,struct circle_buffer *ring_buf,int read_write_flag)
+{
+    int mydebug=0;
+    if(mydebug && func_name && ring_buf)
+    {
+        if(read_write_flag)
+            printk("printk_my_debug: func_name[%s] uart_read_buf start[%d] end[%d] \n",func_name,ring_buf->read_pos,ring_buf->write_pos);
+        else
+            printk("printk_my_debug: func_name[%s] uart_write_buf start[%d] end[%d] \n",func_name,ring_buf->read_pos,ring_buf->write_pos);
+            
+    }
+}
+
+static struct tty_sim_serial *tty_sim_table[TTY_SIM_MINOR];
+
+struct uart_sim_console_drv{
+    char driver_name[16];
+    char class_name[16];
+    char dev_name[16];
+    int major;
+    int minor;
+    int num;
+    dev_t devno;
+    struct device *sim_dev;
+    struct class *cls;
+    struct file_operations * drv_file_op;
+    struct tty_driver   *tty_driver;
+    wait_queue_head_t inq, outq;       /* read and write queues */
+};
+
+static struct file_operations uart_sim_ops=  
+{  
+    .open     = uart_sim_open,  
+    .read     = uart_sim_read,  
+    .write    = uart_sim_write,  
+    .poll     = uart_sim_poll,
+};  
+
+static struct uart_sim_console_drv uart_sim_driver={
+    .dev_name ="uart-sim",
+    .class_name ="uart-sim_class",
+    .major =150,
+    .minor =0,
+    .drv_file_op =&uart_sim_ops,
+};
+
+static struct uart_sim_console_drv tty_sim_driver={
+    .driver_name = "MY-TTY-SIM",
+    .dev_name ="ttyF",
+    .class_name ="ttyF0_class",
+    .major =151,
+    .minor =0,
+    .num =1,
+};
+
+ssize_t uart_sim_read (struct file *filp, char __user *buf, size_t count, loff_t *offset)
+{
+    char tmp_buf[TMP_BUF_SIZE]={0};
+    ssize_t len;
+    size_t max_buf_size=TMP_BUF_SIZE;
+
+
+    len=min(count,max_buf_size);
+    memset(tmp_buf,0,TMP_BUF_SIZE);
+    //printk_my_debug("uart_sim_read read before",&uart_read_buf,1);
+    len=circle_buffer_get(&uart_read_buf,tmp_buf,len);
+    //printk_my_debug("uart_sim_read read before",&uart_read_buf,1);
+    if(len >0 && !copy_to_user(buf,tmp_buf, len))
+    {
+        return len;
+    }
+    else
+        return -1;
+}
+
+ssize_t uart_sim_write (struct file *filp, const char __user *buf, size_t count, loff_t *offset)
+{
+    char tmp_buf[TMP_BUF_SIZE]={0};
+    ssize_t len;
+    size_t max_buf_size=TMP_BUF_SIZE;
+    
+    memset(tmp_buf,0,sizeof(tmp_buf));
+
+    len=min(count,max_buf_size);
+    if(!copy_from_user(tmp_buf,buf,len))
+    {
+        //printk_my_debug("uart_sim_write write before",&uart_write_buf,0);
+        len=circle_buffer_put(&uart_write_buf,tmp_buf,len);
+        //printk_my_debug("uart_sim_write write before",&uart_write_buf,0);
+
+        return len;
+    }
+    else
+        return -1;
+    
+}
+
+
+int uart_sim_open (struct inode * inode, struct file *filp)
+{
+    filp->private_data =&uart_sim_driver;
+    
+    return 0;     
+}
+
+
+
+static unsigned int uart_sim_poll(struct file *filp, poll_table *wait)
+{
+    unsigned int mask = 0;
+    struct uart_sim_console_drv *drv;
+
+    drv=filp->private_data;
+    poll_wait(filp, &drv->inq,  wait);
+    poll_wait(filp, &drv->outq,  wait);
+
+    if(circle_buffer_len_room(&uart_write_buf) >0)
+    {
+        mask |= POLLOUT | POLLWRNORM;   /* writable */
+    }
+
+    if(circle_buffer_len(&uart_read_buf) >0)
+    {
+        mask |= POLLIN | POLLRDNORM;    /* readable */
+    }
+
+    return mask;
+}
+
+
+
+int uart_sim_register_driver(struct uart_sim_console_drv *drv)
+{
+    int ret;      
+
+    drv->devno = MKDEV(drv->major,drv->minor);  
+    ret = register_chrdev(drv->major,drv->dev_name,drv->drv_file_op);  
+    if (ret < 0)
+            goto out;
+
+    drv->cls = class_create(THIS_MODULE, drv->class_name);  
+    if(IS_ERR(drv->cls))  
+    {  
+        unregister_chrdev(drv->major,drv->dev_name);  
+        return -EBUSY;  
+    }  
+
+    drv->sim_dev= device_create(drv->cls,NULL,drv->devno,NULL,drv->dev_name);  
+    if(IS_ERR(drv->sim_dev))  
+    {  
+        class_destroy(drv->cls);  
+        unregister_chrdev(drv->major,drv->dev_name);  
+        return -EBUSY;  
+    }        
+
+    init_waitqueue_head(&(drv->inq));
+    init_waitqueue_head(&(drv->outq));
+
+out:
+        return -ENOMEM;
+}
+
+
+int uart_sim_unregister_driver(struct uart_sim_console_drv *drv)
+{
+    device_destroy(drv->cls,drv->devno);  
+    class_destroy(drv->cls);   
+    unregister_chrdev(drv->major,drv->dev_name);
+    return 0;
+}
+
+static void
+tty_sim_console_write(struct console *co, const char *s,
+        unsigned int count)
+{
+
+}
+
+static int __init
+tty_sim_console_setup(struct console *co, char *options)
+{
+    return 0;
+}
+
+struct tty_driver *tty_sim_device(struct console *co, int *index)
+{
+        struct uart_sim_console_drv *p = co->data;
+        *index = co->index;
+        return p->tty_driver;
+}
+
+static struct console tty_sim_console = {
+    .name        = "ttyF",
+    .write        = tty_sim_console_write,
+    .setup        = tty_sim_console_setup,
+    .device       = tty_sim_device,
+    .flags        = CON_PRINTBUFFER|CON_ANYTIME,
+    .index        = -1,
+    .data         =&tty_sim_driver,
+};
+
+static int tty_sim_open(struct tty_struct *tty, struct file *filp)
+{
+    struct tty_sim_serial *tiny;
+    int index;
+    struct tty_port *port;
+    int status;
+
+    index = tty->index;
+    tiny = tty_sim_table[index];
+
+    port = &tiny->port;
+
+    status = tty_port_open(port, tty, filp);
+
+    if(!status) {
+        tty->driver_data = tiny;
+    }
+
+    return status;
+ 
+}
+
+static void tty_sim_close(struct tty_struct *tty, struct file *file)
+{
+    struct tty_sim_serial *tiny = tty->driver_data;
+    struct tty_port *port;
+
+    port = &tiny->port;
+
+    if (tiny)
+        tty_port_close(port, tty, file);
+}      
+
+/* Our fake UART values */
+#define MCR_DTR         0x01
+#define MCR_RTS         0x02
+#define MCR_LOOP        0x04
+#define MSR_CTS         0x08
+#define MSR_CD          0x10
+#define MSR_RI          0x20
+#define MSR_DSR         0x40
+
+static int tty_sim_tiocmget(struct tty_struct *tty)
+{
+    struct tty_sim_serial *tiny = tty->driver_data;
+
+    unsigned int result = 0;
+    unsigned int msr = tiny->msr;
+    unsigned int mcr = tiny->mcr;
+
+    result = ((mcr & MCR_DTR)  ? TIOCM_DTR  : 0) |  /* DTR is set */
+         ((mcr & MCR_RTS)  ? TIOCM_RTS  : 0) |      /* RTS is set */
+         ((mcr & MCR_LOOP) ? TIOCM_LOOP : 0) |      /* LOOP is set */
+         ((msr & MSR_CTS)  ? TIOCM_CTS  : 0) |      /* CTS is set */
+         ((msr & MSR_CD)   ? TIOCM_CAR  : 0) |      /* Carrier detect is set*/
+         ((msr & MSR_RI)   ? TIOCM_RI   : 0) |      /* Ring Indicator is set */
+         ((msr & MSR_DSR)  ? TIOCM_DSR  : 0);       /* DSR is set */
+
+    return result;
+}
+
+static int tty_sim_tiocmset(struct tty_struct *tty,
+                         unsigned int set, unsigned int clear)
+{
+        struct tty_sim_serial *tiny = tty->driver_data;
+        unsigned int mcr = tiny->mcr;
+
+        if (set & TIOCM_RTS)
+                mcr |= MCR_RTS;
+        if (set & TIOCM_DTR)
+                mcr |= MCR_RTS;
+
+        if (clear & TIOCM_RTS)
+                mcr &= ~MCR_RTS;
+        if (clear & TIOCM_DTR)
+                mcr &= ~MCR_RTS;
+
+        /* set the new MCR value in the device */
+        tiny->mcr = mcr;
+        return 0;
+}
+
+
+#define RELEVANT_IFLAG(iflag) ((iflag) & (IGNBRK|BRKINT|IGNPAR|PARMRK|INPCK))
+static void tty_sim_set_termios(struct tty_struct *tty,
+                     struct ktermios *old_termios)
+{
+    unsigned int cflag;
+
+    cflag = tty->termios.c_cflag;
+
+    /* check that they really want us to change something */
+    if (old_termios) {
+        if ((cflag == old_termios->c_cflag) &&
+         (RELEVANT_IFLAG(tty->termios.c_iflag) ==
+         RELEVANT_IFLAG(old_termios->c_iflag))) {
+            //printk(KERN_DEBUG " - nothing to change...\n");
+            return;
+        }
+    }
+
+    /* get the byte size */
+    switch (cflag & CSIZE) {
+        case CS5:
+            printk(KERN_DEBUG " - data bits = 5\n");
+            break;
+        case CS6:
+            printk(KERN_DEBUG " - data bits = 6\n");
+            break;
+        case CS7:
+            printk(KERN_DEBUG " - data bits = 7\n");
+            break;
+        default:
+        case CS8:
+            printk(KERN_DEBUG " - data bits = 8\n");
+            break;
+    }
+    
+    /* determine the parity */
+    if (cflag & PARENB)
+        if (cflag & PARODD)
+            printk(KERN_DEBUG " - parity = odd\n");
+        else
+            printk(KERN_DEBUG " - parity = even\n");
+    else
+        printk(KERN_DEBUG " - parity = none\n");
+
+    /* figure out the stop bits requested */
+    if (cflag & CSTOPB)
+        printk(KERN_DEBUG " - stop bits = 2\n");
+    else
+        printk(KERN_DEBUG " - stop bits = 1\n");
+
+    /* figure out the hardware flow control settings */
+    if (cflag & CRTSCTS)
+        printk(KERN_DEBUG " - RTS/CTS is enabled\n");
+    else
+        printk(KERN_DEBUG " - RTS/CTS is disabled\n");
+    
+    /* determine software flow control */
+    /* if we are implementing XON/XOFF, set the start and
+     * stop character in the device */
+    if (I_IXOFF(tty) || I_IXON(tty)) {
+        unsigned char stop_char = STOP_CHAR(tty);
+        unsigned char start_char = START_CHAR(tty);
+
+        /* if we are implementing INBOUND XON/XOFF */
+        if (I_IXOFF(tty))
+            printk(KERN_DEBUG " - INBOUND XON/XOFF is enabled, "
+                "XON = %2x, XOFF = %2x", start_char, stop_char);
+        else
+            printk(KERN_DEBUG" - INBOUND XON/XOFF is disabled");
+
+        /* if we are implementing OUTBOUND XON/XOFF */
+        if (I_IXON(tty))
+            printk(KERN_DEBUG" - OUTBOUND XON/XOFF is enabled, "
+                "XON = %2x, XOFF = %2x", start_char, stop_char);
+        else
+            printk(KERN_DEBUG" - OUTBOUND XON/XOFF is disabled");
+    }
+
+    /* get the baud rate wanted */
+    printk(KERN_DEBUG " - baud rate = %d", tty_get_baud_rate(tty));  
+}
+
+#define tty_sim_ioctl tty_sim_ioctl_tiocgserial
+static int tty_sim_ioctl(struct tty_struct *tty,
+                      unsigned int cmd, unsigned long arg)
+{
+        struct tty_sim_serial *tiny = tty->driver_data;
+
+        if (cmd == TIOCGSERIAL) {
+            struct serial_struct tmp;
+
+            if (!arg)
+                    return -EFAULT;
+
+            memset(&tmp, 0, sizeof(tmp));
+
+            tmp.type                = tiny->serial.type;
+            tmp.line                = tiny->serial.line;
+            tmp.port                = tiny->serial.port;
+            tmp.irq                 = tiny->serial.irq;
+            tmp.flags               = ASYNC_SKIP_TEST | ASYNC_AUTO_IRQ;
+            tmp.xmit_fifo_size      = tiny->serial.xmit_fifo_size;
+            tmp.baud_base           = tiny->serial.baud_base;
+            tmp.close_delay         = 5*HZ;
+            tmp.closing_wait        = 30*HZ;
+            tmp.custom_divisor      = tiny->serial.custom_divisor;
+            tmp.hub6                = tiny->serial.hub6;
+            tmp.io_type             = tiny->serial.io_type;
+
+            if (copy_to_user((void __user *)arg, &tmp, sizeof(struct serial_struct)))
+                    return -EFAULT;
+            return 0;
+        }
+        return -ENOIOCTLCMD;
+}
+#undef tty_sim_ioctl
+
+#define tty_sim_ioctl tty_sim_ioctl_tiocmiwait
+static int tty_sim_ioctl(struct tty_struct *tty,
+                      unsigned int cmd, unsigned long arg)
+{
+struct tty_sim_serial *tiny = tty->driver_data;
+
+    if (cmd == TIOCMIWAIT) {
+        DECLARE_WAITQUEUE(wait, current);
+        struct async_icount cnow;
+        struct async_icount cprev;
+
+        cprev = tiny->icount;
+        while (1) {
+            add_wait_queue(&tiny->wait, &wait);
+            set_current_state(TASK_INTERRUPTIBLE);
+            schedule();
+            remove_wait_queue(&tiny->wait, &wait);
+
+            /* see if a signal woke us up */
+            if (signal_pending(current))
+                    return -ERESTARTSYS;
+
+            cnow = tiny->icount;
+            if (cnow.rng == cprev.rng && cnow.dsr == cprev.dsr &&
+                cnow.dcd == cprev.dcd && cnow.cts == cprev.cts)
+                    return -EIO; /* no change => error */
+            if (((arg & TIOCM_RNG) && (cnow.rng != cprev.rng)) ||
+                ((arg & TIOCM_DSR) && (cnow.dsr != cprev.dsr)) ||
+                ((arg & TIOCM_CD)  && (cnow.dcd != cprev.dcd)) ||
+                ((arg & TIOCM_CTS) && (cnow.cts != cprev.cts)) ) {
+                    return 0;
+            }
+            cprev = cnow;
+        }
+
+    }
+    return -ENOIOCTLCMD;
+}
+#undef tty_sim_ioctl
+
+#define tty_sim_ioctl tty_sim_ioctl_tiocgicount
+static int tty_sim_ioctl(struct tty_struct *tty,
+                      unsigned int cmd, unsigned long arg)
+{
+    struct tty_sim_serial *tiny = tty->driver_data;
+
+    if (cmd == TIOCGICOUNT) {
+        struct async_icount cnow = tiny->icount;
+        struct serial_icounter_struct icount;
+
+        icount.cts      = cnow.cts;
+        icount.dsr      = cnow.dsr;
+        icount.rng      = cnow.rng;
+        icount.dcd      = cnow.dcd;
+        icount.rx       = cnow.rx;
+        icount.tx       = cnow.tx;
+        icount.frame    = cnow.frame;
+        icount.overrun  = cnow.overrun;
+        icount.parity   = cnow.parity;
+        icount.brk      = cnow.brk;
+        icount.buf_overrun = cnow.buf_overrun;
+
+        if (copy_to_user((void __user *)arg, &icount, sizeof(icount)))
+                return -EFAULT;
+        return 0;
+    }
+    return -ENOIOCTLCMD;
+}
+#undef tty_sim_ioctl
+
+/* the real tty_sim_ioctl function.  The above is done to get the small functions in the book */
+static int tty_sim_ioctl(struct tty_struct *tty,
+                      unsigned int cmd, unsigned long arg)
+{
+    switch (cmd) {
+    case TIOCGSERIAL:
+            return tty_sim_ioctl_tiocgserial(tty, cmd, arg);
+    case TIOCMIWAIT:
+            return tty_sim_ioctl_tiocmiwait(tty, cmd, arg);
+    case TIOCGICOUNT:
+            return tty_sim_ioctl_tiocgicount(tty, cmd, arg);
+    }
+
+    return -ENOIOCTLCMD;
+}
+
+static int tty_sim_write_room(struct tty_struct *tty) 
+{
+    struct tty_sim_serial *tiny = tty->driver_data;
+    int room = -EINVAL;
+    struct tty_port *port;
+    unsigned long flags;
+
+    if (!tiny)
+            return -ENODEV;
+
+    mutex_lock(&tiny->port_write_mutex);
+
+    port = &tiny->port;
+    spin_lock_irqsave(&port->lock, flags);
+    if (!port->count) {
+            spin_unlock_irqrestore(&port->lock, flags);
+            /* port was not opened */
+            goto exit;
+    }
+    spin_unlock_irqrestore(&port->lock, flags);
+
+    /* calculate how much room is left in the uart_read_buf */
+    room = circle_buffer_len_room(&uart_read_buf);
+
+exit:
+    mutex_unlock(&tiny->port_write_mutex);
+    return room;
+}
+
+static int tty_sim_write(struct tty_struct *tty, const unsigned char *buf, int count)
+{
+    struct tty_sim_serial *tiny = tty->driver_data;
+    int retval;
+    struct tty_port *port;
+    unsigned long flags;
+    struct uart_sim_console_drv *drv;
+    drv=&uart_sim_driver;
+
+    if (!tiny)
+            return -ENODEV;
+
+    mutex_lock(&tiny->port_write_mutex);
+
+    port = &tiny->port;
+    spin_lock_irqsave(&port->lock, flags);
+    if (!port->count) {
+            spin_unlock_irqrestore(&port->lock, flags);
+            /* port was not opened */
+            retval = -EINVAL;
+            goto exit;
+    }
+    spin_unlock_irqrestore(&port->lock, flags);
+
+
+    printk_my_debug("tty_sim_write write before",&uart_read_buf,1);
+
+    retval=circle_buffer_put(&uart_read_buf,(void *)buf,count); 
+    if(retval >0)
+        wake_up_interruptible(&drv->inq);
+    printk_my_debug("tty_sim_write write after",&uart_read_buf,1);
+    
+
+exit:
+    mutex_unlock(&tiny->port_write_mutex);
+    return retval;
+
+}
+
+
+static struct tty_operations tty_sim_ops = {
+    .open = tty_sim_open,
+    .close = tty_sim_close,
+    .write = tty_sim_write,
+    .write_room = tty_sim_write_room,
+    .set_termios = tty_sim_set_termios,
+    .tiocmget = tty_sim_tiocmget,
+    .tiocmset = tty_sim_tiocmset,
+    .ioctl = tty_sim_ioctl,
+};
+
+static void tty_sim_timer(unsigned long timer_data)
+{
+        struct tty_sim_serial *tiny = (struct tty_sim_serial *)timer_data;
+        struct tty_port *port;
+        int i;
+        char tmp_buf[TMP_BUF_SIZE];
+        int data_size;
+        struct uart_sim_console_drv *drv;
+
+        drv=&uart_sim_driver;
+
+        if (!tiny)
+                return;
+
+        port = &tiny->port;
+
+        memset(tmp_buf,0,sizeof(tmp_buf)); 
+
+        printk_my_debug("tty_sim_timer:read before",&uart_write_buf,0);
+        data_size=circle_buffer_get(&uart_write_buf,tmp_buf,TMP_BUF_SIZE);
+        printk_my_debug("tty_sim_timer:read after",&uart_write_buf,0);
+
+        tty_buffer_request_room(port, data_size);
+        for (i = 0; i < data_size; ++i) {
+            tty_insert_flip_char(port, tmp_buf[i], TTY_NORMAL);
+        }
+        tty_flip_buffer_push(port);
+
+        /* resubmit the timer again */
+        tiny->timer->expires = jiffies + DELAY_TIME;
+        add_timer(tiny->timer);
+
+        if(circle_buffer_len_room(&uart_write_buf) >0)
+            wake_up_interruptible(&drv->outq);
+}
+
+/*
+ * this is the first time this port is opened
+ * do any hardware initialization needed here
+ */
+static int tty_sim_port_activate(struct tty_port *tport, struct tty_struct *tty)
+{
+        struct tty_sim_serial *tiny;
+        struct timer_list *timer;
+
+        tiny = container_of(tport, struct tty_sim_serial, port);
+
+        /* create our timer and submit it */
+        if (!tiny->timer) {
+            timer = kmalloc(sizeof(*timer), GFP_KERNEL);
+            if (!timer) {
+                    return -ENOMEM;
+            }
+            init_timer(timer);
+            tiny->timer = timer;
+        }
+        tiny->timer->data = (unsigned long )tiny;
+        tiny->timer->expires = jiffies + DELAY_TIME;
+        tiny->timer->function = tty_sim_timer;
+        add_timer(tiny->timer);
+        return 0;
+}
+
+/*
+ * The port is being closed by the last user.
+ * Do any hardware specific stuff here *
+ */
+static void tty_sim_port_shutdown(struct tty_port *tport){
+        struct tty_sim_serial *tiny;
+
+        tiny = container_of(tport, struct tty_sim_serial, port);
+
+        /* shut down our timer */
+        del_timer(tiny->timer);
+}
+
+static const struct tty_port_operations tty_sim_port_ops = {
+        .activate               = tty_sim_port_activate,
+        .shutdown               = tty_sim_port_shutdown,
+};
+
+int tty_sim_register_driver(struct uart_sim_console_drv *drv)
+{
+        struct tty_driver *normal;
+        struct tty_sim_serial *tiny;
+        int retval,i;
+
+        normal = alloc_tty_driver(TTY_SIM_MINOR);
+        if (!normal)
+            return -ENOMEM;
+
+        normal->owner = THIS_MODULE;
+        normal->driver_name     = drv->driver_name;
+        normal->name            = drv->dev_name;
+        normal->major           = drv->major;
+        normal->minor_start     = drv->minor;
+        normal->type            = TTY_DRIVER_TYPE_SERIAL;
+        normal->subtype         = SERIAL_TYPE_NORMAL;
+        normal->init_termios    = tty_std_termios;
+        normal->init_termios.c_cflag = B9600 | CS8 | CREAD | HUPCL | CLOCAL;
+        normal->init_termios.c_ispeed = normal->init_termios.c_ospeed = 9600;
+        normal->flags = TTY_DRIVER_REAL_RAW ;
+        drv->tty_driver = normal;
+        
+        tty_set_operations(normal, &tty_sim_ops);
+
+
+        for (i = 0; i < TTY_SIM_MINOR; ++i) {
+            /* let's create it */
+            tiny = kmalloc(sizeof(*tiny), GFP_KERNEL);
+            if (!tiny) {
+                    retval = -ENOMEM;
+                    printk(KERN_ERR "failed to alloc uart-sim_serial");
+                    goto err_kmalloc;
+            }
+
+            mutex_init(&tiny->port_write_mutex);
+            tiny->timer = NULL;
+
+            tty_sim_table[i] = tiny;
+            tty_port_init(&tiny->port);
+            tiny->port.ops = &tty_sim_port_ops;
+            tty_port_link_device(&tiny->port,normal, i);
+        }
+
+        retval = tty_register_driver(normal);
+        if (retval)
+        {
+            printk(KERN_ERR "failed to register uart-sim tty driver");
+            goto err_tty_register_driver; 
+        }
+
+        return retval;
+
+
+err_kmalloc:
+        for (i = 0; i < TTY_SIM_MINOR; ++i) {
+            tiny = tty_sim_table[i];
+            if (tiny) {
+                tty_port_destroy(&tiny->port);
+                kfree(tiny);
+            }
+        }
+err_tty_register_driver:
+        put_tty_driver(normal);
+
+
+        return retval;
+
+}
+
+/*
+ * The port is being closed by the last user.
+ * Do any hardware specific stuff here *
+ */
+static void tty_sim_timer_shutdown(struct tty_port *tport){
+    struct tty_sim_serial *tiny;
+
+    tiny = container_of(tport, struct tty_sim_serial, port);
+
+    /* shut down our timer */
+    del_timer(tiny->timer);
+}
+
+
+int tty_sim_unregister_driver(struct uart_sim_console_drv *drv)
+{
+    struct tty_driver *p = drv->tty_driver;
+    struct tty_sim_serial *tiny;
+    int i;
+
+    tty_unregister_driver(p);
+    put_tty_driver(p);
+    for (i = 0; i < TTY_SIM_MINOR; ++i) {
+        tiny = tty_sim_table[i];
+        if(tiny->port.count)
+            tty_sim_timer_shutdown(&tiny->port);
+
+        /* shut down our timer and free the memory */
+        if(tiny->timer) {
+            del_timer(tiny->timer);
+            kfree(tiny->timer);
+        }
+
+        tty_port_destroy(&tiny->port);
+        kfree(tiny);
+        tty_sim_table[i] = NULL;
+    }
+
+    return 0;
+}
+
+static int __init tty_sim_init(void)
+{
+    int ret;
+
+    if( (ret = circle_buffer_init(&uart_read_buf)) < 0)
+    {
+        printk(KERN_ERR "failed to register uart-sim tty driver");
+        return ret;
+    }
+
+    if((ret = circle_buffer_init(&uart_write_buf)) < 0)
+    {
+        printk(KERN_ERR "failed to register uart-sim tty driver");
+        return ret;
+    }
+
+    uart_sim_register_driver(&uart_sim_driver); 
+    tty_sim_register_driver(&tty_sim_driver); 
+    register_console(&tty_sim_console);
+    return 0; 
+}
+
+static void __exit tty_sim_exit(void)
+{
+    circle_buffer_deinit(&uart_read_buf);
+    circle_buffer_deinit(&uart_write_buf);
+    unregister_console(&tty_sim_console);
+    uart_sim_unregister_driver(&uart_sim_driver);
+    tty_sim_unregister_driver(&tty_sim_driver);
+    return;
+}
+
+module_init(tty_sim_init);
+module_exit(tty_sim_exit);
+
+MODULE_DESCRIPTION("self define console driver");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Texas Instruments Inc");
--- linux-custom-orig/drivers/tty/serial/Makefile	2018-07-15 00:46:30.000000000 +0800
+++ linux-custom-silicom/drivers/tty/serial/Makefile	2018-07-16 13:51:24.696533070 +0800
@@ -94,6 +94,7 @@
 obj-$(CONFIG_SERIAL_PIC32)	+= pic32_uart.o
 obj-$(CONFIG_SERIAL_MPS2_UART)	+= mps2-uart.o
 obj-$(CONFIG_SERIAL_OWL)	+= owl-uart.o
+obj-$(CONFIG_UART_SIM_UBMC) += uart_sim_ubmc.o
 
 # GPIOLIB helpers for modem control lines
 obj-$(CONFIG_SERIAL_MCTRL_GPIO)	+= serial_mctrl_gpio.o
--- linux-custom-orig/drivers/tty/serial/Kconfig	2018-07-15 00:46:30.000000000 +0800
+++ linux-custom-silicom/drivers/tty/serial/Kconfig	2018-07-16 13:51:24.696533070 +0800
@@ -85,6 +85,13 @@
 	  with "earlycon=smh" on the kernel command line. The console is
 	  enabled when early_param is processed.
 
+config UART_SIM_UBMC
+    tristate "SILICOM uart sim UBMC for console"
+    default m
+    help
+      This module is responsible for creating the ttyF0 and the uart-sim char dev,
+      and will pass data directly between the tty Device, and the char device. 
+
 config SERIAL_SB1250_DUART
 	tristate "BCM1xxx on-chip DUART serial support"
 	depends on SIBYTE_SB1xxx_SOC=y
