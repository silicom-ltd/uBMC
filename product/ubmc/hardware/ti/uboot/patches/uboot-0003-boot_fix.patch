diff -uNr uboot-custom-orig/drivers/mmc/mmc.c uboot-custom-silicom/drivers/mmc/mmc.c
--- uboot-custom-orig/drivers/mmc/mmc.c	2017-09-27 06:20:58.000000000 +0800
+++ uboot-custom-silicom/drivers/mmc/mmc.c	2018-07-24 00:02:46.797348325 +0800
@@ -1412,8 +1412,12 @@
 		mmc->card_caps |= MMC_MODE_4BIT;
 
 	/* Version 1.0 doesn't support switching */
+#ifdef NO_SILC_UBMC
+	//Jeff: somehow the sd card says it is 1.0, and slows it down greatly.
+	//removing this then works fine.
 	if (mmc->version == SD_VERSION_1_0)
 		return 0;
+#endif
 
 	timeout = 4;
 	while (timeout--) {
diff -uNr uboot-custom-orig/common/spl/spl.c uboot-custom-silicom/common/spl/spl.c
--- uboot-custom-orig/common/spl/spl.c	2017-09-27 06:20:58.000000000 +0800
+++ uboot-custom-silicom/common/spl/spl.c	2018-07-24 00:02:46.797348325 +0800
@@ -274,7 +274,9 @@
 
 __weak void board_boot_order(u32 *spl_boot_list)
 {
+#ifdef NO_SILC_UBMC
 	spl_boot_list[0] = spl_boot_device();
+#endif
 }
 
 static struct spl_image_loader *spl_ll_find_loader(uint boot_device)
@@ -366,6 +368,17 @@
 void board_init_r(gd_t *dummy1, ulong dummy2)
 {
 	u32 spl_boot_list[] = {
+#ifdef CONFIG_TARGET_UBMC335X
+#ifdef CONFIG_UMBC_SD_UBOOT
+		BOOT_DEVICE_MMC1,		//sdcard
+#else
+		BOOT_DEVICE_MMC1,		//emmc
+#endif
+#endif
+#ifdef CONFIG_TARGET_UBMC_EVAL
+		BOOT_DEVICE_MMC1,		//emmc
+		BOOT_DEVICE_UART,
+#endif
 		BOOT_DEVICE_NONE,
 		BOOT_DEVICE_NONE,
 		BOOT_DEVICE_NONE,
@@ -456,8 +469,7 @@
 
 	gd->have_console = 1;
 
-	puts("\nU-Boot SPL " PLAIN_VERSION " (" U_BOOT_DATE " - " \
-			U_BOOT_TIME ")\n");
+	puts("\nInitializing uBMC Firmware. Version " CONFIG_LOCALVERSION "\n");
 #ifdef CONFIG_SPL_DISPLAY_PRINT
 	spl_display_print();
 #endif
--- uboot-custom-orig/board/silicom/silicom_autoboot.c	1970-01-01 08:00:00.000000000 +0800
+++ uboot-custom-silicom/board/silicom/silicom_autoboot.c	2018-11-12 17:14:55.973141998 +0800
@@ -0,0 +1,115 @@
+/*
+ * silicom_autoboot.c
+ *
+ *  Created on: Aug 5, 2018
+ *      Author: jeff_zheng
+ */
+#include <common.h>
+#include <errno.h>
+#include "mmc.h"
+
+#define SILC_FLAG_INDEX_BOOT     0
+#define SILC_FLAG_INDEX_UPGRADE  1
+
+#define UBMC_BOOT_FLAG_ADDR			0x10000
+#define UBMC_UPGRADE_FLAG_ADDR			0x11000
+
+int silicom_autoboot_mmc(int emmc_dev, int sd_boot_dev)
+{
+#if defined(CONFIG_UMBC_SD_UBOOT)
+	char sd_mmc_dev_str[16];
+
+	sprintf(sd_mmc_dev_str, "%u", sd_boot_dev);
+	setenv("mmcdev", "0");
+	setenv("mmcbank", "");
+#else
+	struct mmc *mmc;
+	struct blk_desc * mmc_blk_dev;
+	char mmc_dev_str[16];
+
+	sprintf(mmc_dev_str, "%u", emmc_dev);
+
+	unsigned long flag_addrs[2] = { UBMC_BOOT_FLAG_ADDR, UBMC_UPGRADE_FLAG_ADDR };
+	char flags[2];
+	char flags_save[2];
+
+	mmc = init_mmc_device(emmc_dev, false);
+	if ( mmc == NULL)
+	{
+		boot_prn("Failed to get emmc device mmcdev %d, autobooting will fail\n", emmc_dev);
+		return -1;
+	}
+	mmc_blk_dev = mmc_get_blk_desc(mmc);
+	if( NULL == mmc_blk_dev)
+	{
+		boot_prn("Failed to get emmc device mmcdev %d, autobooting will fail\n", emmc_dev);
+		return -1;
+	}
+
+	board_mmc_read_flag(mmc_blk_dev, UBMC_BOOT_FLAG_ADDR, &flags[SILC_FLAG_INDEX_BOOT]);
+	boot_prn("Boot    flag: %d:%c", flags[SILC_FLAG_INDEX_BOOT], flags[SILC_FLAG_INDEX_BOOT]);
+	board_mmc_read_flag(mmc_blk_dev, UBMC_UPGRADE_FLAG_ADDR, &flags[SILC_FLAG_INDEX_UPGRADE]);
+	boot_prn("Upgrade flag: %d:%c", flags[SILC_FLAG_INDEX_UPGRADE], flags[SILC_FLAG_INDEX_UPGRADE]);
+
+	flags_save[0] = flags[0];
+	flags_save[1] = flags[1];
+	// check upgrade status
+	if(flags[SILC_FLAG_INDEX_UPGRADE] == '2')       // check if upgrade failed
+	{
+		//uprade failed, we revert boot bank back to the other bank
+		flags[SILC_FLAG_INDEX_UPGRADE] = '0';
+		if(flags[SILC_FLAG_INDEX_BOOT] == '1') // revert
+		        flags[SILC_FLAG_INDEX_BOOT] = '0';
+		else
+		        flags[SILC_FLAG_INDEX_BOOT] = '1';
+		boot_prn("Revert boot to bank %c", flags[SILC_FLAG_INDEX_BOOT] );
+	}
+
+	else if(flags[SILC_FLAG_INDEX_UPGRADE] == '1')  // upgrade step 2, first reboot after upgrade
+	{
+		//Set upgrade flag to 2, so next time, we know uprade succeeded or not
+		flags[SILC_FLAG_INDEX_UPGRADE] = '2';
+	}
+	else if(flags[SILC_FLAG_INDEX_UPGRADE] == '0')  // normal boot
+	{
+
+	}
+	else
+	{
+		boot_prn("Invalid upgrade flag %02x:%c\n", flags[SILC_FLAG_INDEX_UPGRADE], flags[SILC_FLAG_INDEX_UPGRADE]);
+		flags[SILC_FLAG_INDEX_UPGRADE] = '0';
+	}
+
+	//write flag back if it has changed
+	if(flags[0] != flags_save[0])
+	{
+		boot_prn("Saving Boot Flag %c", flags[0]);
+		board_mmc_write_flag(mmc_blk_dev, flag_addrs[0], flags[0]);
+	}
+	if(flags[1] != flags_save[1])
+	{
+		boot_prn("Saving Upgrade Flag %c", flags[1]);
+		board_mmc_write_flag(mmc_blk_dev, flag_addrs[1], flags[1]);
+	}
+
+	switch (flags[SILC_FLAG_INDEX_BOOT])
+	{
+	case '1':
+		boot_prn("Booting from bank 1");
+		setenv("mmcbank", "1");
+		break;
+	case '0':
+		boot_prn("Booting from bank 0");
+		setenv("mmcbank", "0");
+		break;
+	default:
+		boot_prn("Unknown Boot flag %c, Booting from bank 0", flags[SILC_FLAG_INDEX_BOOT]);
+		setenv("mmcbank", "0");
+		break;
+	}
+	setenv("mmcdev", mmc_dev_str);
+#endif
+	setenv("bootcmd", "run loadbootscript; run bootscript;");
+	return 0;
+}
+
