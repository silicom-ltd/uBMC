--- uboot-custom-orig/cmd/mem.c	2017-09-27 06:20:58.000000000 +0800
+++ uboot-custom-silicom/cmd/mem.c	2018-06-14 16:32:25.267012339 +0800
@@ -943,7 +943,13 @@
 	ulong incr, length;
 	ulong val, readback;
 
+	ulong patterns[] = { 0xaaaaaaaa, 0x55555555, 0x00000000, 0xffffffff,
+		0x11111111, 0xeeeeeeee, 0xcccccccc, 0x33333333, 
+		0x22222222, 0xdddddddd, 0x44444444, 0xbbbbbbbb,
+		0x88888888, 0x77777777, 0x66666666, 0x99999999};
+
 	/* Alternate the pattern */
+#if 0
 	incr = 1;
 	if (iteration & 1) {
 		incr = -incr;
@@ -958,26 +964,45 @@
 		else
 			pattern = ~pattern;
 	}
+#endif
 	length = (end_addr - start_addr) / sizeof(ulong);
 	end = buf + length;
-	printf("\rPattern %08lX  Writing..."
-		"%12s"
-		"\b\b\b\b\b\b\b\b\b\b",
-		pattern, "");
+	puts("Using pattern:");
+	for( incr = 0; incr<16; incr++)
+	{
+		printf(" %08lx", patterns[(incr+iteration)&0xfUL]);
+	}
+	printf("\nWriting");
 
-	for (addr = buf, val = pattern; addr < end; addr++) {
+	incr = iteration &0xfUL;
+	for (addr = buf; addr < end; addr++) {
 		WATCHDOG_RESET();
-		*addr = val;
-		val += incr;
+		vu_long* __addr = addr;
+		vu_long* __end = addr + 0x100000;
+		for(;__addr  < __end; __addr ++)
+		{
+		val = patterns[incr];
+		*__addr = val;
+		incr = (incr + 1) & 0xfUL;
+		}
+		printf(".");
+		addr = __addr;
 	}
+	printf("\n");
 
-	puts("Reading...");
+	puts("Reading");
 
-	for (addr = buf, val = pattern; addr < end; addr++) {
+	incr = iteration &0xfUL;
+	for (addr = buf ; addr < end; addr++) {
 		WATCHDOG_RESET();
-		readback = *addr;
+		vu_long* __addr = addr;
+		vu_long* __end = addr + 0x100000;
+		for(;__addr  < __end; __addr ++)
+		{
+		val = patterns[incr];
+		readback = *__addr;
 		if (readback != val) {
-			ulong offset = addr - buf;
+			ulong offset = __addr - buf;
 
 			printf("\nMem error @ 0x%08X: "
 				"found %08lX, expected %08lX\n",
@@ -987,8 +1012,12 @@
 			if (ctrlc())
 				return -1;
 		}
-		val += incr;
+		incr = (incr + 1) & 0xfUL;
+		}
+		printf(".");
+		addr = __addr;
 	}
+	printf("\n");
 
 	return errs;
 }
@@ -1003,7 +1032,7 @@
 {
 	ulong start, end;
 	vu_long *buf, *dummy;
-	ulong iteration_limit = 0;
+	ulong iteration_limit = 16;
 	int ret;
 	ulong errs = 0;	/* number of errors, or -1 if interrupted */
 	ulong pattern = 0;
