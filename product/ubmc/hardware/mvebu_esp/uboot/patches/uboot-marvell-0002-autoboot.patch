--- uboot-custom-orig/arch/arm/Kconfig	2019-06-03 05:21:34.000000000 +0800
+++ uboot-custom-silicom/arch/arm/Kconfig	2019-12-25 15:58:34.974707358 +0800
@@ -1342,6 +1342,7 @@
 source "board/spear/spear600/Kconfig"
 source "board/spear/x600/Kconfig"
 source "board/st/stv0991/Kconfig"
+source "board/silicom/ubmc_esp/Kconfig"
 source "board/tcl/sl50/Kconfig"
 source "board/birdland/bav335x/Kconfig"
 source "board/timll/devkit3250/Kconfig"
--- uboot-custom-orig/include/configs/ubmc_esp.h	1970-01-01 08:00:00.000000000 +0800
+++ uboot-custom-silicom/include/configs/ubmc_esp.h	2019-12-25 16:45:47.493144321 +0800
@@ -0,0 +1,620 @@
+/*
+ *
+ *
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __CONFIG_UBMC_ESP_H
+#define __CONFIG_UBMC_ESP_H
+
+#include <asm/arch/soc.h>
+
+/*
+ * High Level Configuration Options (easy to change)
+ */
+#define CONFIG_DISPLAY_BOARDINFO_LATE
+
+/* additions for new ARM relocation support */
+#define CONFIG_SYS_SDRAM_BASE	0x00000000
+
+/* auto boot */
+#define CONFIG_PREBOOT
+
+#define CONFIG_BAUDRATE			115200
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, \
+					  115200, 230400, 460800, 921600 }
+
+/* Default Env vars */
+#define CONFIG_IPADDR			0.0.0.0	/* In order to cause an error */
+#define CONFIG_SERVERIP			0.0.0.0	/* In order to cause an error */
+#define CONFIG_NETMASK			255.255.255.0
+#define CONFIG_GATEWAYIP		192.168.49.254
+#define CONFIG_HAS_ETH1
+#define CONFIG_HAS_ETH2
+#define CONFIG_ETHPRIME			"eth0"
+#define CONFIG_ROOTPATH                 "/srv/nfs/" /* Default Dir for NFS */
+#define CONFIG_ENV_OVERWRITE		/* ethaddr can be reprogrammed */
+/*
+ * For booting Linux, the board info and command line data
+ * have to be in the first 8 MB of memory, since this is
+ * the maximum mapped by the Linux kernel during initialization.
+ */
+#define CONFIG_CMDLINE_TAG		/* enable passing of ATAGs  */
+#define CONFIG_INITRD_TAG		/* enable INITRD tag */
+#define CONFIG_SETUP_MEMORY_TAGS	/* enable memory tag */
+
+#define	CONFIG_SYS_CBSIZE	1024	/* Console I/O Buff Size */
+#define	CONFIG_SYS_PBSIZE	(CONFIG_SYS_CBSIZE \
+		+ sizeof(CONFIG_SYS_PROMPT) + 16)	/* Print Buff */
+
+/*
+ * Size of malloc() pool
+ */
+#define CONFIG_SYS_MALLOC_LEN	(9 << 20) /* 16MiB for malloc() */
+
+/*
+ * Other required minimal configurations
+ */
+#define CONFIG_ARCH_CPU_INIT		/* call arch_cpu_init() */
+#define CONFIG_SYS_LOAD_ADDR	0x00800000	/* default load adr- 8M */
+#define CONFIG_SYS_MEMTEST_START 0x00800000	/* 8M */
+#define CONFIG_SYS_MEMTEST_END	0x00ffffff	/*(_16M -1) */
+#define CONFIG_SYS_RESET_ADDRESS 0xffff0000	/* Rst Vector Adr */
+#define CONFIG_SYS_MAXARGS	32	/* max number of command args */
+
+#define CONFIG_SYS_ALT_MEMTEST
+
+/* End of 16M scrubbed by training in bootrom */
+#define CONFIG_SYS_INIT_SP_ADDR         (CONFIG_SYS_TEXT_BASE + 0xFF0000)
+
+/*
+ * SPI Flash configuration
+ */
+#define CONFIG_ENV_SPI_BUS		0
+#define CONFIG_ENV_SPI_CS		0
+
+/* SPI NOR flash default params, used by sf commands */
+#define CONFIG_SF_DEFAULT_SPEED		40000000
+#define CONFIG_SF_DEFAULT_MODE		SPI_MODE_0
+#define CONFIG_ENV_SPI_MODE		CONFIG_SF_DEFAULT_MODE
+
+/*
+ * Assume minimum flash/eMMC boot partition size of 4MB
+ * and save the environment at the end of the boot device
+ * There is one exclusion from this rule - the EspressoBIN board with eMMC.
+ * The eMMC device found on some EspressoBIN V7 boards has 2MB boot partition.
+ */
+#define CONFIG_ENV_SIZE			(64 << 10) /* 64KiB */
+#define CONFIG_ENV_SECT_SIZE		(64 << 10) /* 64KiB sectors */
+
+#ifdef CONFIG_MVEBU_NAND_BOOT
+/* In case of NAND, we want to start the environment on page boundary */
+#define CONFIG_ENV_OFFSET		0x400000
+#else
+#if defined(CONFIG_ENV_IS_IN_MMC) && \
+defined(CONFIG_TARGET_MVEBU_ARMADA_37XX) && defined(CONFIG_MV88E6XXX_SWITCH)
+/* This one should be EspressoBin, since A3700 DB does not have
+ * MV88E6XXX switch enabled. Is there any other way to detect it?
+ */
+#define CONFIG_ENV_OFFSET		(0x200000 - CONFIG_ENV_SIZE)
+#else
+#define CONFIG_ENV_OFFSET		(0x400000 - CONFIG_ENV_SIZE)
+#endif
+#endif
+
+#ifdef CONFIG_ENV_IS_IN_MMC
+#ifdef CONFIG_TARGET_MVEBU_ARMADA_37XX
+#define CONFIG_SYS_MMC_ENV_DEV		1 /* A3700 emmc is on sdhci-1*/
+#define CONFIG_SYS_MMC_ENV_PART		1 /* 0-DATA, 1-BOOT0, 2-BOOT1 */
+#else
+#define CONFIG_SYS_MMC_ENV_DEV		0
+#define CONFIG_SYS_MMC_ENV_PART		0 /* 0-DATA, 1-BOOT0, 2-BOOT1 */
+#endif
+#endif
+
+/*
+ * SATA/SCSI/AHCI configuration
+ */
+#define CONFIG_SCSI_AHCI_PLAT
+#define CONFIG_LBA48
+#define CONFIG_SYS_64BIT_LBA
+
+#define CONFIG_SYS_SCSI_MAX_SCSI_ID	2
+#define CONFIG_SYS_SCSI_MAX_LUN		1
+#define CONFIG_SYS_SCSI_MAX_DEVICE	(CONFIG_SYS_SCSI_MAX_SCSI_ID * \
+					 CONFIG_SYS_SCSI_MAX_LUN)
+
+/*
+ * Ethernet Driver configuration
+ */
+#define CONFIG_ARP_TIMEOUT	200
+#define CONFIG_NET_RETRY_COUNT	50
+
+/*
+ * The EEPROM ST M24C64 has 32 byte page write mode and takes up to 10 msec.
+ */
+#define CONFIG_SYS_EEPROM_PAGE_WRITE_DELAY_MS 10
+/***********************************************************/
+#define CONFIG_DEFAULT_CONSOLE		"console=ttyMV0,115200 "\
+						"earlycon=ar3700_uart,0xd0012000"
+
+
+/*
+ *  * High Level Configuration Options (easy to change)
+ *   */
+#define CONFIG_NR_DRAM_BANKS	4
+
+/*
+ *  * I2C
+ *   */
+#define CONFIG_I2C_MV
+#define CONFIG_BOARD_LATE_INIT
+#define CONFIG_SYS_I2C_SLAVE		0x0
+/*#define CONFIG_GENERIC_MMC*/
+
+#define DEFAULT_UBMC_LINUX_BOOT_ENV \
+						"bootcmd=run get_images; " \
+						"run set_bootargs; " \
+						"booti $kernel_addr_r " \
+						"$ramdisk_addr_r " \
+						"$fdt_addr_r\0" \
+					"extra_params=pci=pcie_bus_safe\0" \
+					"kernel_addr_r=0x7000000\0"	\
+					"initrd_addr=0xa00000\0"	\
+					"initrd_size=0x2000000\0"	\
+					"fdt_addr_r=0x6f00000\0"	\
+					"loadaddr=0x8000000\0"		\
+					"fdt_high=0xffffffffffffffff\0"	\
+					"hostname=marvell\0"		\
+					"ramdisk_addr_r=0x8000000\0"	\
+					"ramfs_name=-\0"		\
+					"cpuidle=cpuidle.off=1\0"	\
+					"fdt_name=fdt.dtb\0"		\
+					"netdev=eth0\0"			\
+					"ethaddr=00:51:82:11:22:00\0"	\
+					"eth1addr=00:51:82:11:22:01\0"	\
+					"eth2addr=00:51:82:11:22:02\0"	\
+					"eth3addr=00:51:82:11:22:03\0"	\
+					"image_name=Image\0"		\
+					"get_ramfs=if test \"${ramfs_name}\"" \
+						" != \"-\"; then setenv " \
+						"ramdisk_addr_r 0x8000000; " \
+						"tftpboot $ramdisk_addr_r " \
+						"$ramfs_name; else setenv " \
+						"ramdisk_addr_r -;fi\0"	\
+					"get_images=tftpboot $kernel_addr_r " \
+						"$image_name; tftpboot " \
+						"$fdt_addr_r $fdt_name; " \
+						"run get_ramfs\0"	\
+					"console=" CONFIG_DEFAULT_CONSOLE "\0"\
+					"root=root=/dev/nfs rw\0"	\
+					"set_bootargs=setenv bootargs $console"\
+						" $root ip=$ipaddr:$serverip:" \
+						"$gatewayip:$netmask:$hostname"\
+						":$netdev:none nfsroot="\
+						"$serverip:$rootpath,tcp,v3 " \
+						"$extra_params " \
+						"$cpuidle\0" \
+
+#define UBMC_MMC_MVEBU_ARGS \
+	"loadbootscript=usb start;ext4load ${bootdev} ${mmcdev} ${loadaddr} boot${mmcbank}.scr\0" \
+	"bootscript=echo Running bootscript from ${bootdev} ${mmcdev} bank ${mmcbank}...; " \
+		"source ${loadaddr}\0"
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	DEFAULT_UBMC_LINUX_BOOT_ENV \
+	UBMC_MMC_MVEBU_ARGS
+/*	"bootpart=0:1\0" \
+	"bootdir=/boot\0" \
+	"bootfile=Image\0" \
+	"fdtfile=dt.dtb\0" \
+	"console=ttyS0,115200n8\0" \
+	"silent=1\0" \
+	UBMC_MMC_MVEBU_ARGS*/
+/*	NETARGS \*/
+
+/*
+ *  * Ethernet Driver configuration
+ *   */
+#define CONFIG_PHY_MARVELL
+
+#define CONFIG_USB_MAX_CONTROLLER_COUNT (1 + 2)
+/************************************************************/
+#if 0
+
+#define CONFIG_AUTOBOOT_KEYED
+#define CONFIG_AUTOBOOT_DELAY_STR "si1c"
+
+
+#ifndef CONFIG_SPL_BUILD
+# define CONFIG_TIMESTAMP
+# define CONFIG_LZO
+#endif
+
+#define CONFIG_SYS_BOOTM_LEN		(16 << 20)
+
+#define MACH_TYPE_TIAM335EVM		3589	/* Until the next sync */
+#define CONFIG_MACH_TYPE		MACH_TYPE_TIAM335EVM
+#define CONFIG_BOARD_LATE_INIT
+
+/* Clock Defines */
+#define V_OSCK				24000000  /* Clock output from T2 */
+#define V_SCLK				(V_OSCK)
+
+/* Custom script for NOR */
+#define CONFIG_SYS_LDSCRIPT		"board/silicom/ubmc335x/u-boot.lds"
+
+/* Always 128 KiB env size */
+#define CONFIG_ENV_SIZE			(128 << 10)
+
+/* Enhance our eMMC support / experience. */
+#define CONFIG_CMD_GPT
+#define CONFIG_EFI_PARTITION
+
+#define CONFIG_SYS_MEMTEST_START 0x82000000
+#define CONFIG_SYS_MEMTEST_END   0x9d000000
+#define CONFIG_SYS_MEMTEST_SCRATCH 0x81000000
+
+#ifdef CONFIG_NAND
+#define NANDARGS \
+	"mtdids=" MTDIDS_DEFAULT "\0" \
+	"mtdparts=" MTDPARTS_DEFAULT "\0" \
+	"nandargs=setenv bootargs console=${console} " \
+		"${optargs} " \
+		"root=${nandroot} " \
+		"rootfstype=${nandrootfstype}\0" \
+	"nandroot=ubi0:rootfs rw ubi.mtd=NAND.file-system,2048\0" \
+	"nandrootfstype=ubifs rootwait=1\0" \
+	"nandboot=echo Booting from nand ...; " \
+		"run nandargs; " \
+		"nand read ${fdtaddr} NAND.u-boot-spl-os; " \
+		"nand read ${loadaddr} NAND.kernel; " \
+		"bootz ${loadaddr} - ${fdtaddr}\0"
+#else
+#define NANDARGS ""
+#endif
+
+#define CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+
+#define BOOTENV_DEV_LEGACY_MMC(devtypeu, devtypel, instance) \
+	"bootcmd_" #devtypel #instance "=" \
+	"setenv mmcdev " #instance"; "\
+	"setenv bootpart " #instance":2 ; "\
+	"run mmcboot\0"
+
+#define BOOTENV_DEV_NAME_LEGACY_MMC(devtypeu, devtypel, instance) \
+	#devtypel #instance " "
+
+#define BOOTENV_DEV_NAND(devtypeu, devtypel, instance) \
+	"bootcmd_" #devtypel "=" \
+	"run nandboot\0"
+
+#define BOOTENV_DEV_NAME_NAND(devtypeu, devtypel, instance) \
+	#devtypel #instance " "
+
+#define BOOT_TARGET_DEVICES(func) \
+	func(MMC, mmc, 0) \
+	func(LEGACY_MMC, legacy_mmc, 0) \
+	func(MMC, mmc, 1) \
+	func(LEGACY_MMC, legacy_mmc, 1) \
+	func(NAND, nand, 0) \
+	func(PXE, pxe, na) \
+	func(DHCP, dhcp, na)
+
+#define CONFIG_BOOTCOMMAND \
+	"if test ${boot_fit} -eq 1; then "	\
+		"run update_to_fit;"	\
+	"fi;"	\
+	"run findfdt; " \
+	"run init_console; " \
+	"run envboot; " \
+	"run distro_bootcmd"
+
+#include <config_distro_bootcmd.h>
+
+#ifndef CONFIG_SPL_BUILD
+#include <environment/ti/dfu.h>
+#include <environment/ti/mmc.h>
+#if 0
+	DEFAULT_MMC_TI_ARGS \
+	DFUARGS \
+	BOOTENV
+	"partitions=" \
+		"uuid_disk=${uuid_gpt_disk};" \
+		"name=rootfs,start=2MiB,size=-,uuid=${uuid_gpt_rootfs}\0" \
+	"optargs=\0" \
+	"ramroot=/dev/ram0 rw\0" \
+	"ramrootfstype=ext2\0" \
+	"spiroot=/dev/mtdblock4 rw\0" \
+	"spirootfstype=jffs2\0" \
+	"spisrcaddr=0xe0000\0" \
+	"spiimgsize=0x362000\0" \
+	"spibusno=0\0" \
+	"spiargs=setenv bootargs console=${console} " \
+		"${optargs} " \
+		"root=${spiroot} " \
+		"rootfstype=${spirootfstype}\0" \
+	"ramargs=setenv bootargs console=${console} " \
+		"${optargs} " \
+		"root=${ramroot} " \
+		"rootfstype=${ramrootfstype}\0" \
+
+#endif
+
+#define UBMC_MMC_TI_ARGS \
+	"loadbootscript=load mmc ${mmcdev} ${loadaddr} boot${mmcbank}.scr\0" \
+	"bootscript=echo Running bootscript from mmc${mmcdev} bank ${mmcbank}...; " \
+		"source ${loadaddr}\0" \
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	DEFAULT_LINUX_BOOT_ENV \
+	"bootpart=0:1\0" \
+	"bootdir=/boot\0" \
+	"bootfile=zImage\0" \
+	"fdtfile=dt.dtb\0" \
+	"console=ttyS0,115200n8\0" \
+	"silent=1\0" \
+	UBMC_MMC_TI_ARGS \
+	NETARGS \
+	BOOTENV_SHARED_MMC
+#endif
+
+/* NS16550 Configuration */
+#define CONFIG_SYS_NS16550_COM1		0x44e09000	/* Base EVM has UART0 */
+#define CONFIG_SYS_NS16550_COM2		0x48022000	/* UART1 */
+#define CONFIG_SYS_NS16550_COM3		0x48024000	/* UART2 */
+#define CONFIG_SYS_NS16550_COM4		0x481a6000	/* UART3 */
+#define CONFIG_SYS_NS16550_COM5		0x481a8000	/* UART4 */
+#define CONFIG_SYS_NS16550_COM6		0x481aa000	/* UART5 */
+#define CONFIG_BAUDRATE			115200
+
+#define CONFIG_CMD_EEPROM
+#define CONFIG_ENV_EEPROM_IS_ON_I2C
+#define CONFIG_SYS_I2C_EEPROM_ADDR	0x50	/* Main EEPROM */
+#define CONFIG_SYS_I2C_EEPROM_ADDR_LEN	2
+
+/* PMIC support */
+#define CONFIG_POWER_TPS65217
+#define CONFIG_POWER_TPS65910
+
+/* SPL */
+#ifndef CONFIG_NOR_BOOT
+/* Bootcount using the RTC block */
+#define CONFIG_BOOTCOUNT_LIMIT
+#define CONFIG_BOOTCOUNT_AM33XX
+#define CONFIG_SYS_BOOTCOUNT_BE
+
+/* USB gadget RNDIS */
+
+#define CONFIG_SPL_LDSCRIPT		"arch/arm/mach-omap2/u-boot-spl.lds"
+#endif
+
+#ifdef CONFIG_NAND
+/* NAND: device related configs */
+#define CONFIG_SYS_NAND_5_ADDR_CYCLE
+#define CONFIG_SYS_NAND_PAGE_COUNT	(CONFIG_SYS_NAND_BLOCK_SIZE / \
+					 CONFIG_SYS_NAND_PAGE_SIZE)
+#define CONFIG_SYS_NAND_PAGE_SIZE	2048
+#define CONFIG_SYS_NAND_OOBSIZE		64
+#define CONFIG_SYS_NAND_BLOCK_SIZE	(128*1024)
+/* NAND: driver related configs */
+#define CONFIG_NAND_OMAP_GPMC
+#define CONFIG_NAND_OMAP_GPMC_PREFETCH
+#define CONFIG_NAND_OMAP_ELM
+#define CONFIG_SYS_NAND_BAD_BLOCK_POS	NAND_LARGE_BADBLOCK_POS
+#define CONFIG_SYS_NAND_ECCPOS		{ 2, 3, 4, 5, 6, 7, 8, 9, \
+					 10, 11, 12, 13, 14, 15, 16, 17, \
+					 18, 19, 20, 21, 22, 23, 24, 25, \
+					 26, 27, 28, 29, 30, 31, 32, 33, \
+					 34, 35, 36, 37, 38, 39, 40, 41, \
+					 42, 43, 44, 45, 46, 47, 48, 49, \
+					 50, 51, 52, 53, 54, 55, 56, 57, }
+
+#define CONFIG_SYS_NAND_ECCSIZE		512
+#define CONFIG_SYS_NAND_ECCBYTES	14
+#define CONFIG_SYS_NAND_ONFI_DETECTION
+#define CONFIG_NAND_OMAP_ECCSCHEME	OMAP_ECC_BCH8_CODE_HW
+#define MTDIDS_DEFAULT			"nand0=nand.0"
+#define MTDPARTS_DEFAULT		"mtdparts=nand.0:" \
+					"128k(NAND.SPL)," \
+					"128k(NAND.SPL.backup1)," \
+					"128k(NAND.SPL.backup2)," \
+					"128k(NAND.SPL.backup3)," \
+					"256k(NAND.u-boot-spl-os)," \
+					"1m(NAND.u-boot)," \
+					"128k(NAND.u-boot-env)," \
+					"128k(NAND.u-boot-env.backup1)," \
+					"8m(NAND.kernel)," \
+					"-(NAND.file-system)"
+#define CONFIG_SYS_NAND_U_BOOT_OFFS	0x000c0000
+/* NAND: SPL related configs */
+#ifdef CONFIG_SPL_NAND_SUPPORT
+#define CONFIG_SPL_NAND_AM33XX_BCH
+#endif
+#ifdef CONFIG_SPL_OS_BOOT
+#define CONFIG_CMD_SPL_NAND_OFS	0x00080000 /* os parameters */
+#define CONFIG_SYS_NAND_SPL_KERNEL_OFFS	0x00200000 /* kernel offset */
+#define CONFIG_CMD_SPL_WRITE_SIZE	0x2000
+#endif
+#endif /* !CONFIG_NAND */
+
+/*
+ * For NOR boot, we must set this to the start of where NOR is mapped
+ * in memory.
+ */
+#ifdef CONFIG_NOR_BOOT
+#define CONFIG_SYS_TEXT_BASE		0x08000000
+#endif
+
+/*
+ * USB configuration.  We enable MUSB support, both for host and for
+ * gadget.  We set USB0 as peripheral and USB1 as host, based on the
+ * board schematic and physical port wired to each.  Then for host we
+ * add mass storage support and for gadget we add both RNDIS ethernet
+ * and DFU.
+ */
+/*#define CONFIG_USB_MUSB_DSPS*/
+#define CONFIG_ARCH_MISC_INIT
+/*#define CONFIG_USB_MUSB_PIO_ONLY
+#define CONFIG_USB_MUSB_DISABLE_BULK_COMBINE_SPLIT
+#define CONFIG_AM335X_USB0
+#define CONFIG_AM335X_USB0_MODE	MUSB_PERIPHERAL
+#define CONFIG_AM335X_USB1
+#define CONFIG_AM335X_USB1_MODE MUSB_HOST*/
+
+#ifndef CONFIG_SPL_USBETH_SUPPORT
+/* Fastboot */
+/*#define CONFIG_USB_FUNCTION_FASTBOOT
+#define CONFIG_CMD_FASTBOOT
+#define CONFIG_ANDROID_BOOT_IMAGE
+#define CONFIG_FASTBOOT_BUF_ADDR	CONFIG_SYS_LOAD_ADDR
+#define CONFIG_FASTBOOT_BUF_SIZE	0x07000000
+
+#define CONFIG_FASTBOOT_FLASH_MMC_DEV   1*/
+#endif
+
+#ifdef CONFIG_USB_MUSB_GADGET
+#define CONFIG_USB_ETHER
+#define CONFIG_USB_ETH_RNDIS
+#define CONFIG_USBNET_HOST_ADDR	"de:ad:be:af:00:00"
+#endif /* CONFIG_USB_MUSB_GADGET */
+
+/*
+ * Disable MMC DM for SPL build and can be re-enabled after adding
+ * DM support in SPL
+ */
+#ifdef CONFIG_SPL_BUILD
+#undef CONFIG_DM_MMC
+#undef CONFIG_TIMER
+#undef CONFIG_DM_USB
+#undef CONFIG_DM_NAND
+#endif
+
+#if defined(CONFIG_SPL_BUILD) && defined(CONFIG_SPL_USBETH_SUPPORT)
+/* disable host part of MUSB in SPL */
+/* disable EFI partitions and partition UUID support */
+#undef CONFIG_PARTITION_UUIDS
+#undef CONFIG_EFI_PARTITION
+#endif
+
+/* USB Device Firmware Update support */
+#ifndef CONFIG_SPL_BUILD
+#define DFUARGS \
+	"dfu_alt_info_emmc=rawemmc raw 0 3751936\0" \
+	DFU_ALT_INFO_MMC \
+	DFU_ALT_INFO_RAM \
+	DFU_ALT_INFO_NAND
+#endif
+
+/*
+ * Default to using SPI for environment, etc.
+ * 0x000000 - 0x020000 : SPL (128KiB)
+ * 0x020000 - 0x0A0000 : U-Boot (512KiB)
+ * 0x0A0000 - 0x0BFFFF : First copy of U-Boot Environment (128KiB)
+ * 0x0C0000 - 0x0DFFFF : Second copy of U-Boot Environment (128KiB)
+ * 0x0E0000 - 0x442000 : Linux Kernel
+ * 0x442000 - 0x800000 : Userland
+ */
+#if defined(CONFIG_SPI_BOOT)
+/* SPL related */
+#define CONFIG_SPL_SPI_LOAD
+#define CONFIG_SYS_SPI_U_BOOT_OFFS	0x20000
+
+#define CONFIG_ENV_IS_IN_SPI_FLASH
+#define CONFIG_SYS_REDUNDAND_ENVIRONMENT
+#define CONFIG_ENV_SPI_MAX_HZ		CONFIG_SF_DEFAULT_SPEED
+#define CONFIG_ENV_SECT_SIZE		(4 << 10) /* 4 KB sectors */
+#define CONFIG_ENV_OFFSET		(768 << 10) /* 768 KiB in */
+#define CONFIG_ENV_OFFSET_REDUND	(896 << 10) /* 896 KiB in */
+#define MTDIDS_DEFAULT			"nor0=m25p80-flash.0"
+#define MTDPARTS_DEFAULT		"mtdparts=m25p80-flash.0:128k(SPL)," \
+					"512k(u-boot),128k(u-boot-env1)," \
+					"128k(u-boot-env2),3464k(kernel)," \
+					"-(rootfs)"
+#elif defined(CONFIG_EMMC_BOOT)
+#define CONFIG_ENV_IS_IN_MMC
+#define CONFIG_SYS_MMC_ENV_DEV		1
+#define CONFIG_SYS_MMC_ENV_PART		2
+#define CONFIG_ENV_OFFSET		0x0
+#define CONFIG_ENV_OFFSET_REDUND	(CONFIG_ENV_OFFSET + CONFIG_ENV_SIZE)
+#define CONFIG_SYS_REDUNDAND_ENVIRONMENT
+#elif defined(CONFIG_NOR_BOOT)
+#define CONFIG_ENV_IS_IN_FLASH
+#define CONFIG_ENV_SECT_SIZE		(128 << 10)	/* 128 KiB */
+#define CONFIG_ENV_OFFSET		(512 << 10)	/* 512 KiB */
+#define CONFIG_ENV_OFFSET_REDUND	(768 << 10)	/* 768 KiB */
+#define MTDIDS_DEFAULT			"nor0=physmap-flash.0"
+#define MTDPARTS_DEFAULT		"mtdparts=physmap-flash.0:" \
+					"512k(u-boot)," \
+					"128k(u-boot-env1)," \
+					"128k(u-boot-env2)," \
+					"4m(kernel),-(rootfs)"
+#elif defined(CONFIG_ENV_IS_IN_NAND)
+#define CONFIG_ENV_OFFSET		0x001c0000
+#define CONFIG_ENV_OFFSET_REDUND	0x001e0000
+#define CONFIG_SYS_ENV_SECT_SIZE	CONFIG_SYS_NAND_BLOCK_SIZE
+#elif !defined(CONFIG_ENV_IS_NOWHERE)
+/* Not NAND, SPI, NOR or eMMC env, so put ENV in a file on FAT */
+#define CONFIG_ENV_IS_IN_FAT
+#define FAT_ENV_INTERFACE		"mmc"
+#define FAT_ENV_DEVICE_AND_PART		"0:1"
+#define FAT_ENV_FILE			"uboot.env"
+#endif
+
+/* SPI flash. */
+#define CONFIG_SF_DEFAULT_SPEED		24000000
+
+/* Network. */
+#define CONFIG_PHY_GIGE
+#define CONFIG_PHYLIB
+#define CONFIG_PHY_SMSC
+/* Enable Atheros phy driver */
+#define CONFIG_PHY_ATHEROS
+
+/*
+ * NOR Size = 16 MiB
+ * Number of Sectors/Blocks = 128
+ * Sector Size = 128 KiB
+ * Word length = 16 bits
+ * Default layout:
+ * 0x000000 - 0x07FFFF : U-Boot (512 KiB)
+ * 0x080000 - 0x09FFFF : First copy of U-Boot Environment (128 KiB)
+ * 0x0A0000 - 0x0BFFFF : Second copy of U-Boot Environment (128 KiB)
+ * 0x0C0000 - 0x4BFFFF : Linux Kernel (4 MiB)
+ * 0x4C0000 - 0xFFFFFF : Userland (11 MiB + 256 KiB)
+ */
+#if defined(CONFIG_NOR)
+#undef CONFIG_SYS_NO_FLASH
+#define CONFIG_SYS_FLASH_USE_BUFFER_WRITE
+#define CONFIG_SYS_FLASH_PROTECTION
+#define CONFIG_SYS_FLASH_CFI
+#define CONFIG_FLASH_CFI_DRIVER
+#define CONFIG_FLASH_CFI_MTD
+#define CONFIG_SYS_MAX_FLASH_SECT	128
+#define CONFIG_SYS_MAX_FLASH_BANKS	1
+#define CONFIG_SYS_FLASH_BASE		(0x08000000)
+#define CONFIG_SYS_FLASH_CFI_WIDTH	FLASH_CFI_16BIT
+#define CONFIG_SYS_FLASH_SIZE		0x01000000
+#define CONFIG_SYS_MONITOR_BASE		CONFIG_SYS_FLASH_BASE
+#endif  /* NOR support */
+
+#ifdef CONFIG_DRIVER_TI_CPSW
+#define CONFIG_CLOCK_SYNTHESIZER
+#define CLK_SYNTHESIZER_I2C_ADDR 0x65
+#endif
+
+#if defined(CONFIG_SPL_BUILD) && defined(CONFIG_TI_SECURE_DEVICE)
+#undef CONFIG_EFI_PARTITION
+#endif /* CONFIG_SPL_BUILD && CONFIG_TI_SECURE_DEVICE */
+#endif /*if 0*/
+#endif	/* ! __CONFIG_UBMC_ESP_H */
+
--- uboot-custom-orig/board/silicom/ubmc_esp/board.c	1970-01-01 08:00:00.000000000 +0800
+++ uboot-custom-silicom/board/silicom/ubmc_esp/board.c	2019-12-25 15:58:34.975707356 +0800
@@ -0,0 +1,452 @@
+/*
+ * Copyright (C) 2016 Stefan Roese <sr@denx.de>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <i2c.h>
+#include <phy.h>
+#include <asm/io.h>
+#include <asm/arch/cpu.h>
+#include <asm/arch/soc.h>
+#include <power/regulator.h>
+#include <environment.h>
+#ifdef CONFIG_BOARD_CONFIG_EEPROM
+#include <mvebu/cfg_eeprom.h>
+#endif
+#include <exports.h>
+#include <fdt_support.h>
+
+#include "mmc.h"
+#include "malloc.h"
+//#include "board_detect.h"
+//#include "board.h"
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/* on Armada3700 rev2 devel-board, IO expander (with I2C address 0x22) bit
+ * 14 is used as Serdes Lane 2 muxing, which could be used as SATA PHY or
+ * USB3 PHY.
+ */
+enum COMPHY_LANE2_MUXING {
+	COMPHY_LANE2_MUX_USB3,
+	COMPHY_LANE2_MUX_SATA
+};
+
+/* IO expander I2C device */
+#define I2C_IO_EXP_ADDR		0x22
+#define I2C_IO_CFG_REG_0	0x6
+#define I2C_IO_DATA_OUT_REG_0	0x2
+#define I2C_IO_REG_0_SATA_OFF	2
+#define I2C_IO_REG_0_USB_H_OFF	1
+#define I2C_IO_COMPHY_SATA3_USB_MUX_BIT	14
+
+/* The pin control values are the same for DB and Espressobin */
+#define PINCTRL_NB_REG_VALUE	0x000173fa
+#define PINCTRL_SB_REG_VALUE	0x00007a23
+
+/* Ethernet switch registers */
+/* SMI addresses for multi-chip mode */
+#define MVEBU_PORT_CTRL_SMI_ADDR(p)	(16 + (p))
+#define MVEBU_SW_G2_SMI_ADDR		(28)
+
+/* Multi-chip mode */
+#define MVEBU_SW_SMI_DATA_REG		(1)
+#define MVEBU_SW_SMI_CMD_REG		(0)
+ #define SW_SMI_CMD_REG_ADDR_OFF	0
+ #define SW_SMI_CMD_DEV_ADDR_OFF	5
+ #define SW_SMI_CMD_SMI_OP_OFF		10
+ #define SW_SMI_CMD_SMI_MODE_OFF	12
+ #define SW_SMI_CMD_SMI_BUSY_OFF	15
+
+/* Single-chip mode */
+/* Switch Port Registers */
+#define MVEBU_SW_LINK_CTRL_REG		(1)
+#define MVEBU_SW_PORT_CTRL_REG		(4)
+
+/* Global 2 Registers */
+#define MVEBU_G2_SMI_PHY_CMD_REG	(24)
+#define MVEBU_G2_SMI_PHY_DATA_REG	(25)
+
+/*
+* For Armada3700 A0 chip, comphy serdes lane 2 could be used as PHY for SATA
+* or USB3.
+* For Armada3700 rev2 devel-board, pin 14 of IO expander PCA9555 with I2C
+* address 0x22 is used as Serdes Lane 2 muxing; the pin needs to be set in
+* output mode: high level is for SATA while low level is for USB3;
+*/
+static int board_comphy_usb3_sata_mux(enum COMPHY_LANE2_MUXING comphy_mux)
+{
+	int ret;
+	u8 buf[8];
+	struct udevice *i2c_dev;
+	int i2c_byte, i2c_bit_in_byte;
+
+	if (!of_machine_is_compatible("marvell,armada-3720-db-v2") &&
+	    !of_machine_is_compatible("marvell,armada-3720-db-v3"))
+		return 0;
+
+	ret = i2c_get_chip_for_busnum(0, I2C_IO_EXP_ADDR, 1, &i2c_dev);
+	if (ret) {
+		printf("Cannot find PCA9555: %d\n", ret);
+		return 0;
+	}
+
+	ret = dm_i2c_read(i2c_dev, I2C_IO_CFG_REG_0, buf, 2);
+	if (ret) {
+		printf("Failed to read IO expander value via I2C\n");
+		return ret;
+	}
+
+	i2c_byte = I2C_IO_COMPHY_SATA3_USB_MUX_BIT / 8;
+	i2c_bit_in_byte = I2C_IO_COMPHY_SATA3_USB_MUX_BIT % 8;
+
+	/* Configure IO exander bit 14 of address 0x22 in output mode */
+	buf[i2c_byte] &= ~(1 << i2c_bit_in_byte);
+	ret = dm_i2c_write(i2c_dev, I2C_IO_CFG_REG_0, buf, 2);
+	if (ret) {
+		printf("Failed to set IO expander via I2C\n");
+		return ret;
+	}
+
+	ret = dm_i2c_read(i2c_dev, I2C_IO_DATA_OUT_REG_0, buf, 2);
+	if (ret) {
+		printf("Failed to read IO expander value via I2C\n");
+		return ret;
+	}
+
+	/* Configure output level for IO exander bit 14 of address 0x22 */
+	if (comphy_mux == COMPHY_LANE2_MUX_SATA)
+		buf[i2c_byte] |= (1 << i2c_bit_in_byte);
+	else
+		buf[i2c_byte] &= ~(1 << i2c_bit_in_byte);
+
+	ret = dm_i2c_write(i2c_dev, I2C_IO_DATA_OUT_REG_0, buf, 2);
+	if (ret) {
+		printf("Failed to set IO expander via I2C\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+int board_early_init_f(void)
+{
+#ifdef CONFIG_BOARD_CONFIG_EEPROM
+	cfg_eeprom_init();
+#endif
+	return 0;
+}
+
+int board_init(void)
+{
+	/* adress of boot parameters */
+	gd->bd->bi_boot_params = CONFIG_SYS_SDRAM_BASE + 0x100;
+
+	/* enable serdes lane 2 mux for sata phy */
+	board_comphy_usb3_sata_mux(COMPHY_LANE2_MUX_SATA);
+
+	return 0;
+}
+
+/* Board specific AHCI / SATA enable code */
+int board_ahci_enable(void)
+{
+	struct udevice *dev;
+	int ret;
+	u8 buf[8];
+
+	/* Only DB requres this configuration */
+	if (!of_machine_is_compatible("marvell,armada-3720-db"))
+		return 0;
+
+	/* Configure IO exander PCA9555: 7bit address 0x22 */
+	ret = i2c_get_chip_for_busnum(0, I2C_IO_EXP_ADDR, 1, &dev);
+	if (ret) {
+		printf("Cannot find PCA9555: %d\n", ret);
+		return 0;
+	}
+
+	ret = dm_i2c_read(dev, I2C_IO_CFG_REG_0, buf, 1);
+	if (ret) {
+		printf("Failed to read IO expander value via I2C\n");
+		return -EIO;
+	}
+
+	/*
+	 * Enable SATA power via IO expander connected via I2C by setting
+	 * the corresponding bit to output mode to enable power for SATA
+	 */
+	buf[0] &= ~(1 << I2C_IO_REG_0_SATA_OFF);
+	ret = dm_i2c_write(dev, I2C_IO_CFG_REG_0, buf, 1);
+	if (ret) {
+		printf("Failed to set IO expander via I2C\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+/* Board specific xHCI enable code */
+int board_xhci_enable(fdt_addr_t base)
+{
+	struct udevice *dev;
+	int ret;
+	u8 buf[8];
+
+	/* Only DB requres this configuration */
+	if (!of_machine_is_compatible("marvell,armada-3720-db"))
+		return 0;
+
+	/* Configure IO exander PCA9555: 7bit address 0x22 */
+	ret = i2c_get_chip_for_busnum(0, I2C_IO_EXP_ADDR, 1, &dev);
+	if (ret) {
+		printf("Cannot find PCA9555: %d\n", ret);
+		return 0;
+	}
+
+	printf("Enable USB VBUS\n");
+
+	/*
+	 * Read configuration (direction) and set VBUS pin as output
+	 * (reset pin = output)
+	 */
+	ret = dm_i2c_read(dev, I2C_IO_CFG_REG_0, buf, 1);
+	if (ret) {
+		printf("Failed to read IO expander value via I2C\n");
+		return -EIO;
+	}
+	buf[0] &= ~(1 << I2C_IO_REG_0_USB_H_OFF);
+	ret = dm_i2c_write(dev, I2C_IO_CFG_REG_0, buf, 1);
+	if (ret) {
+		printf("Failed to set IO expander via I2C\n");
+		return -EIO;
+	}
+
+	/* Read VBUS output value and disable it */
+	ret = dm_i2c_read(dev, I2C_IO_DATA_OUT_REG_0, buf, 1);
+	if (ret) {
+		printf("Failed to read IO expander value via I2C\n");
+		return -EIO;
+	}
+	buf[0] &= ~(1 << I2C_IO_REG_0_USB_H_OFF);
+	ret = dm_i2c_write(dev, I2C_IO_DATA_OUT_REG_0, buf, 1);
+	if (ret) {
+		printf("Failed to set IO expander via I2C\n");
+		return -EIO;
+	}
+
+	/*
+	 * Required delay for configuration to settle - must wait for
+	 * power on port is disabled in case VBUS signal was high,
+	 * required 3 seconds delay to let VBUS signal fully settle down
+	 */
+	mdelay(3000);
+
+	/* Enable VBUS power: Set output value of VBUS pin as enabled */
+	buf[0] |= (1 << I2C_IO_REG_0_USB_H_OFF);
+	ret = dm_i2c_write(dev, I2C_IO_DATA_OUT_REG_0, buf, 1);
+	if (ret) {
+		printf("Failed to set IO expander via I2C\n");
+		return -EIO;
+	}
+
+	mdelay(500); /* required delay to let output value settle */
+
+	return 0;
+}
+
+/* Helper function for accessing switch devices in multi-chip connection mode */
+static int mii_multi_chip_mode_write(struct mii_dev *bus, int dev_smi_addr,
+				     int smi_addr, int reg, u16 value)
+{
+	u16 smi_cmd = 0;
+
+	if (bus->write(bus, dev_smi_addr, 0,
+		       MVEBU_SW_SMI_DATA_REG, value) != 0) {
+		printf("Error writing to the PHY addr=%02x reg=%02x\n",
+		       smi_addr, reg);
+		return -EFAULT;
+	}
+
+	smi_cmd = (1 << SW_SMI_CMD_SMI_BUSY_OFF) |
+		  (1 << SW_SMI_CMD_SMI_MODE_OFF) |
+		  (1 << SW_SMI_CMD_SMI_OP_OFF) |
+		  (smi_addr << SW_SMI_CMD_DEV_ADDR_OFF) |
+		  (reg << SW_SMI_CMD_REG_ADDR_OFF);
+	if (bus->write(bus, dev_smi_addr, 0,
+		       MVEBU_SW_SMI_CMD_REG, smi_cmd) != 0) {
+		printf("Error writing to the PHY addr=%02x reg=%02x\n",
+		       smi_addr, reg);
+		return -EFAULT;
+	}
+
+	return 0;
+}
+
+/* Bring-up board-specific network stuff */
+int board_network_enable(struct mii_dev *bus)
+{
+	if (!of_machine_is_compatible("marvell,armada-3720-espressobin"))
+		return 0;
+
+	/*
+	 * FIXME: remove this code once Topaz driver gets available
+	 * A3720 Community Board Only
+	 * Configure Topaz switch (88E6341)
+	 * Set port 0,1,2,3 to forwarding Mode (through Switch Port registers)
+	 */
+	mii_multi_chip_mode_write(bus, 1, MVEBU_PORT_CTRL_SMI_ADDR(0),
+				  MVEBU_SW_PORT_CTRL_REG, 0x7f);
+	mii_multi_chip_mode_write(bus, 1, MVEBU_PORT_CTRL_SMI_ADDR(1),
+				  MVEBU_SW_PORT_CTRL_REG, 0x7f);
+	mii_multi_chip_mode_write(bus, 1, MVEBU_PORT_CTRL_SMI_ADDR(2),
+				  MVEBU_SW_PORT_CTRL_REG, 0x7f);
+	mii_multi_chip_mode_write(bus, 1, MVEBU_PORT_CTRL_SMI_ADDR(3),
+				  MVEBU_SW_PORT_CTRL_REG, 0x7f);
+
+	/* RGMII Delay on Port 0 (CPU port), force link to 1000Mbps */
+	mii_multi_chip_mode_write(bus, 1, MVEBU_PORT_CTRL_SMI_ADDR(0),
+				  MVEBU_SW_LINK_CTRL_REG, 0xe002);
+
+	/* Power up PHY 1, 2, 3 (through Global 2 registers) */
+	mii_multi_chip_mode_write(bus, 1, MVEBU_SW_G2_SMI_ADDR,
+				  MVEBU_G2_SMI_PHY_DATA_REG, 0x1140);
+	mii_multi_chip_mode_write(bus, 1, MVEBU_SW_G2_SMI_ADDR,
+				  MVEBU_G2_SMI_PHY_CMD_REG, 0x9620);
+	mii_multi_chip_mode_write(bus, 1, MVEBU_SW_G2_SMI_ADDR,
+				  MVEBU_G2_SMI_PHY_CMD_REG, 0x9640);
+	mii_multi_chip_mode_write(bus, 1, MVEBU_SW_G2_SMI_ADDR,
+				  MVEBU_G2_SMI_PHY_CMD_REG, 0x9660);
+
+	return 0;
+}
+
+//#if defined(CONFIG_GENERIC_MMC)
+#define boot_prn(fmt, ...)	printf("====\nBOOT:"fmt"\n====\n", ## __VA_ARGS__)
+int board_mmc_read_flag(struct blk_desc * mmc_blk_dev, unsigned long addr, char* ret_flag)
+{
+	unsigned long blksz=mmc_blk_dev->blksz;
+	unsigned long start_blk=addr/blksz;
+	char* tmp_buf;
+	int ret;
+	if ((start_blk*mmc_blk_dev->blksz) != addr)
+	{
+		boot_prn("Error: Unaligned mmc read, addr %lx, blksz %lx", addr, blksz);
+		return -EINVAL;
+	}
+	tmp_buf = malloc(mmc_blk_dev->blksz*2);
+	if(tmp_buf == NULL)
+	{
+		boot_prn("Error: not enough memory\n");
+		return -ENOMEM;
+	}
+	ret = blk_dread(mmc_blk_dev, start_blk, 1, tmp_buf);
+	if(ret!=1)
+	{
+		boot_prn("Error: MMC read returned %d, addr %lx, blksz %lx", ret, addr, blksz);
+		free(tmp_buf);
+		return -EINVAL;
+	}
+	*ret_flag = tmp_buf[0];
+	free(tmp_buf);
+	
+	return 0;
+}
+
+int board_mmc_write_flag(struct blk_desc * mmc_blk_dev, unsigned long addr, char wr_flag)
+{
+	unsigned long blksz=mmc_blk_dev->blksz;
+	unsigned long start_blk=addr/blksz;
+	int ret;
+	char* tmp_buf;
+	if ((start_blk*mmc_blk_dev->blksz) != addr)
+	{
+		boot_prn("Error: Unaligned mmc write, addr %lx, blksz %lx", addr, blksz);
+		return -EINVAL;
+	}
+	tmp_buf = malloc(mmc_blk_dev->blksz*2);
+	if(tmp_buf == NULL)
+	{
+		boot_prn("Error: not enough memory\n");
+		return -ENOMEM;
+	}
+	memset(tmp_buf, 0, blksz);
+	tmp_buf[0] = wr_flag;
+	ret = blk_dwrite(mmc_blk_dev, start_blk, 1, tmp_buf);
+	if(ret!=1)
+	{
+		boot_prn("Error: MMC write returned %d, addr %lx, blksz %lx", ret, addr, blksz);
+		free(tmp_buf);
+		return -EINVAL;
+	}
+	free(tmp_buf);
+	return 0;
+}
+
+
+#define SILC_FLAG_INDEX_BOOT     0
+#define SILC_FLAG_INDEX_UPGRADE  1
+
+#define UBMC_BOOT_FLAG_ADDR			0x10000
+#define UBMC_UPGRADE_FLAG_ADDR			0x11000
+
+static struct mmc *init_mmc_device(int dev, bool force_init)
+{
+	struct mmc *mmc;
+	mmc = find_mmc_device(dev);
+	if (!mmc) {
+		boot_prn("no mmc device at slot %x\n", dev);
+		return NULL;
+	}
+
+	if (force_init)
+		mmc->has_init = 0;
+	if (mmc_init(mmc))
+		return NULL;
+	return mmc;
+}
+#include "../silicom_autoboot.c"
+int board_get_boot_info(void)
+{
+	//ubmc eval has only one mmc device
+	return silicom_autoboot_mmc(1, 0);
+}
+
+
+/*
+int board_mmc_init(bd_t *bis)
+{
+	int ret;
+#if defined(CONFIG_UMBC_SD_UBOOT)
+	//Initialize SD card only, mmc0 of the am3352, it will become BOOT_DEVICE_MMC1
+	ret = omap_mmc_init(0, 0, 0, -1, -1);
+	printf("MMC/SD init %d\n", ret);
+#else
+	//Initialize emmc only, mmc1 of the am3352, it will also become BOOT_DEVICE_MMC1
+	ret = omap_mmc_init(1, 0, 0, -1, -1);
+	printf("EMMC init %d\n", ret);
+#endif
+
+	return 0;
+}
+*/
+//#endif //defined (CONFIG_GENERIC_MMC)
+
+#ifdef CONFIG_BOARD_LATE_INIT
+void __maybe_unused set_board_info_env(char *name)
+{
+	setenv("board_name", "ubmc_eval");
+	setenv("board_rev", "R300");
+//	setenv("board_serial", "XXXX-XXXXX");
+}
+
+int board_late_init(void)
+{
+	printf("--------------->>>do board_late_init \n");
+	board_get_boot_info();
+	return 0;
+}
+#endif
--- uboot-custom-orig/board/silicom/silicom_autoboot.c	1970-01-01 08:00:00.000000000 +0800
+++ uboot-custom-silicom/board/silicom/silicom_autoboot.c	2019-12-25 16:47:48.386034016 +0800
@@ -0,0 +1,125 @@
+/*
+ * silicom_autoboot.c
+ *
+ *  Created on: Aug 5, 2018
+ *      Author: jeff_zheng
+ */
+
+#include <common.h>
+#include <errno.h>
+#include <exports.h>
+#include "mmc.h"
+
+#define SILC_FLAG_INDEX_BOOT     0
+#define SILC_FLAG_INDEX_UPGRADE  1
+
+#define UBMC_BOOT_FLAG_ADDR			0x10000
+#define UBMC_UPGRADE_FLAG_ADDR			0x11000
+//#define CONFIG_UMBC_SD_UBOOT
+int silicom_autoboot_mmc(int emmc_dev, int sd_boot_dev)
+{
+	boot_prn("do silicom_autoboot_mmc mmcdev %d, sd_boot_dev %d\n", emmc_dev,sd_boot_dev);
+#if defined(CONFIG_UMBC_SD_UBOOT)
+	char sd_mmc_dev_str[16];
+
+	sprintf(sd_mmc_dev_str, "%u", sd_boot_dev);
+	/*Use usb boot mode for armadda37xx*/
+	/*
+	env_set("bootdev", "mmc");
+	env_set("mmcdev", "0");
+	env_set("mmcbank", "");
+	 */
+	env_set("bootdev", "usb");
+	env_set("mmcdev", "0:1");
+	env_set("mmcbank", "");
+#else
+	struct mmc *mmc;
+	struct blk_desc * mmc_blk_dev;
+	char mmc_dev_str[16];
+	env_set("bootdev", "mmc");
+	sprintf(mmc_dev_str, "%u", emmc_dev);
+
+	unsigned long flag_addrs[2] = { UBMC_BOOT_FLAG_ADDR, UBMC_UPGRADE_FLAG_ADDR };
+	char flags[2];
+	char flags_save[2];
+
+	mmc = init_mmc_device(emmc_dev, false);
+	if ( mmc == NULL)
+	{
+		boot_prn("Failed to get emmc device mmcdev %d, autobooting will fail\n", emmc_dev);
+		return -1;
+	}
+	mmc_blk_dev = mmc_get_blk_desc(mmc);
+	if( NULL == mmc_blk_dev)
+	{
+		boot_prn("Failed to get emmc device mmcdev %d, autobooting will fail\n", emmc_dev);
+		return -1;
+	}
+
+	board_mmc_read_flag(mmc_blk_dev, UBMC_BOOT_FLAG_ADDR, &flags[SILC_FLAG_INDEX_BOOT]);
+	boot_prn("Boot    flag: %d:%c", flags[SILC_FLAG_INDEX_BOOT], flags[SILC_FLAG_INDEX_BOOT]);
+	board_mmc_read_flag(mmc_blk_dev, UBMC_UPGRADE_FLAG_ADDR, &flags[SILC_FLAG_INDEX_UPGRADE]);
+	boot_prn("Upgrade flag: %d:%c", flags[SILC_FLAG_INDEX_UPGRADE], flags[SILC_FLAG_INDEX_UPGRADE]);
+
+	flags_save[0] = flags[0];
+	flags_save[1] = flags[1];
+	// check upgrade status
+	if(flags[SILC_FLAG_INDEX_UPGRADE] == '2')       // check if upgrade failed
+	{
+		//uprade failed, we revert boot bank back to the other bank
+		flags[SILC_FLAG_INDEX_UPGRADE] = '0';
+		if(flags[SILC_FLAG_INDEX_BOOT] == '1') // revert
+		        flags[SILC_FLAG_INDEX_BOOT] = '0';
+		else
+		        flags[SILC_FLAG_INDEX_BOOT] = '1';
+		boot_prn("Revert boot to bank %c", flags[SILC_FLAG_INDEX_BOOT] );
+	}
+
+	else if(flags[SILC_FLAG_INDEX_UPGRADE] == '1')  // upgrade step 2, first reboot after upgrade
+	{
+		//Set upgrade flag to 2, so next time, we know uprade succeeded or not
+		flags[SILC_FLAG_INDEX_UPGRADE] = '2';
+	}
+	else if(flags[SILC_FLAG_INDEX_UPGRADE] == '0')  // normal boot
+	{
+
+	}
+	else
+	{
+		boot_prn("Invalid upgrade flag %02x:%c\n", flags[SILC_FLAG_INDEX_UPGRADE], flags[SILC_FLAG_INDEX_UPGRADE]);
+		flags[SILC_FLAG_INDEX_UPGRADE] = '0';
+	}
+
+	//write flag back if it has changed
+	if(flags[0] != flags_save[0])
+	{
+		boot_prn("Saving Boot Flag %c", flags[0]);
+		board_mmc_write_flag(mmc_blk_dev, flag_addrs[0], flags[0]);
+	}
+	if(flags[1] != flags_save[1])
+	{
+		boot_prn("Saving Upgrade Flag %c", flags[1]);
+		board_mmc_write_flag(mmc_blk_dev, flag_addrs[1], flags[1]);
+	}
+
+	switch (flags[SILC_FLAG_INDEX_BOOT])
+	{
+	case '1':
+		boot_prn("Booting from bank 1");
+		env_set("mmcbank", "1");
+		break;
+	case '0':
+		boot_prn("Booting from bank 0");
+		env_set("mmcbank", "0");
+		break;
+	default:
+		boot_prn("Unknown Boot flag %c, Booting from bank 0", flags[SILC_FLAG_INDEX_BOOT]);
+		env_set("mmcbank", "0");
+		break;
+	}
+	env_set("mmcdev", mmc_dev_str);
+#endif
+	env_set("bootcmd", "run loadbootscript; run bootscript;");
+	return 0;
+}
+
--- uboot-custom-orig/board/silicom/ubmc_esp/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ uboot-custom-silicom/board/silicom/ubmc_esp/Makefile	2019-12-25 15:58:34.975707356 +0800
@@ -0,0 +1,10 @@
+#
+# Makefile
+#
+# Copyright (C) 2012-2014, Birdland Audio - http://birdland.com/oem
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+
+obj-y	+= board.o
--- uboot-custom-orig/board/silicom/ubmc_esp/README	1970-01-01 08:00:00.000000000 +0800
+++ uboot-custom-silicom/board/silicom/ubmc_esp/README	2019-12-25 15:58:34.975707356 +0800
@@ -0,0 +1,15 @@
+Summary
+=======
+
+This document covers various features of the 'ubmc_eval' board build.
+For more information about this board, visit http://birdland.com/oem
+
+
+Hardware
+========
+
+Silicom ubmc eval hardware
+
+Customization
+=============
+
--- uboot-custom-orig/arch/arm/mach-mvebu/Kconfig	2019-06-03 05:21:34.000000000 +0800
+++ uboot-custom-silicom/arch/arm/mach-mvebu/Kconfig	2019-12-25 15:58:34.975707356 +0800
@@ -76,6 +76,11 @@
 	bool "Support Armada 37xx platforms"
 	select ARMADA_3700
 	imply SCSI
+	
+config TARGET_UBMC_ESP
+	bool "Support Armada 37xx platforms for silicom ubmc"
+	select ARMADA_3700
+	imply SCSI
 
 config TARGET_DB_88F6720
 	bool "Support DB-88F6720 Armada 375"
@@ -131,6 +136,7 @@
 	default "db-88f6820-amc" if TARGET_DB_88F6820_AMC
 	default "turris_omnia" if TARGET_TURRIS_OMNIA
 	default "mvebu_armada-8k" if TARGET_MVEBU_ARMADA_8K
+	default "ubmc_esp" if TARGET_UBMC_ESP
 	default "db-mv784mp-gp" if TARGET_DB_MV784MP_GP
 	default "ds414" if TARGET_DS414
 	default "maxbcm" if TARGET_MAXBCM
@@ -143,6 +149,7 @@
 	default "db-88f6820-gp" if TARGET_DB_88F6820_GP
 	default "db-88f6820-amc" if TARGET_DB_88F6820_AMC
 	default "mvebu_armada-8k" if TARGET_MVEBU_ARMADA_8K
+	default "ubmc_esp" if TARGET_UBMC_ESP
 	default "db-mv784mp-gp" if TARGET_DB_MV784MP_GP
 	default "ds414" if TARGET_DS414
 	default "maxbcm" if TARGET_MAXBCM
@@ -156,6 +163,7 @@
 	default "Marvell" if TARGET_DB_88F6820_GP
 	default "Marvell" if TARGET_DB_88F6820_AMC
 	default "Marvell" if TARGET_MVEBU_ARMADA_8K
+	default "silicom" if TARGET_UBMC_ESP
 	default "solidrun" if TARGET_CLEARFOG
 	default "Synology" if TARGET_DS414
 	default "CZ.NIC" if TARGET_TURRIS_OMNIA
--- uboot-custom-orig/board/silicom/ubmc_esp/Kconfig	1970-01-01 08:00:00.000000000 +0800
+++ uboot-custom-silicom/board/silicom/ubmc_esp/Kconfig	2019-12-25 15:58:34.975707356 +0800
@@ -0,0 +1,31 @@
+if TARGET_UBMC_ESP
+
+config SYS_BOARD
+	default "ubmc_esp"
+
+config SYS_VENDOR
+	default "silicom"
+
+config SYS_SOC
+	default "m3700"
+
+config SYS_CONFIG_NAME
+	default "ubmc_esp"
+
+config UMBC_SD_UBOOT
+	bool "Select to enable uboot build for sd card booting"
+	help
+		Select this, would cause the SPL MLO to load uboot from sdcard.
+		Also enables auto loading of dtb/zimage/rootfs from sd card
+		if not selected, then default autobooting from emmc with upgrade support
+
+config UBMC_UBOOT_ETH_INDX
+	int "uboot ethnet default out port"
+	range 1 2
+	default 2
+	help 
+		Note that, this does not select eth0 or eth1, uboot for cpsw only have eth0
+		select which port to use for uboot ethernet traffic in the cpsw driver.
+		Default to 2, as ubmc_eval uses the second port for back panel port
+
+endif
